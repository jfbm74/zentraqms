üéØ PROMPT DE CONTEXTO PARA CLAUDE CODE - ZENTRAQMS
CONTEXTO DEL PROYECTO
Est√°s ayudando a desarrollar ZentraQMS, un Sistema de Gesti√≥n de Calidad (QMS) innovador que transforma la gesti√≥n tradicional en un sistema vivo con inteligencia de objetivos, validaci√≥n asistida por IA y memoria decisional organizacional.
VISI√ìN DEL PRODUCTO
Desarrollar un QMS que:

Conecte cada actividad operativa con objetivos estrat√©gicos mediante trazabilidad total
Mantenga memoria decisional de por qu√© se tomaron decisiones organizacionales
Valide inteligentemente la calidad de an√°lisis con IA
Se parametrice en 90 minutos vs 3-6 meses tradicionales
Unifique la vista por proceso donde cada l√≠der ve TODO su proceso en un solo lugar

PROBLEMA QUE RESOLVEMOS

"Paso 60% del tiempo generando reportes" - Automatizamos reporter√≠a
"Nadie tiene memoria de por qu√© se tomaron decisiones" - Implementamos memoria decisional
"No hay conexi√≥n entre lo que hacemos y los objetivos" - Trazabilidad total con Goals Intelligence
"Te sale un ca√±√≥n de documentos con c√≥digos raros" - Gesti√≥n documental inteligente

STACK TECNOL√ìGICO ACTUAL
Backend (Ya configurado)
- Django 5.0 + Django REST Framework
- PostgreSQL (base de datos principal)
- Redis (cache y mensajer√≠a)
- Celery (tareas as√≠ncronas)
- Docker & Docker Compose
Frontend (Ya configurado)
- React 19 + TypeScript
- Vite (build tool)
- Bootstrap 5.3 (UI framework)
- Remix Icons
Sistema de Autenticaci√≥n y Permisos (COMPLETADO ‚úÖ)
python# RBAC implementado con:
- 7 roles jer√°rquicos (super_admin ‚Üí guest)
- 42 permisos granulares
- JWT tokens con roles/permisos incluidos
- Cache de permisos (TTL 1 hora)
- Componentes React: PermissionGate, usePermissions hook
- Rutas protegidas con ProtectedRoute
ARQUITECTURA DEL SISTEMA
M√ìDULOS CORE (Universales - MVP 4 meses)
0. PARAMETRIZACI√ìN INICIAL (base para todo)
   ‚îú‚îÄ‚îÄ Planeaci√≥n Estrat√©gica
   ‚îú‚îÄ‚îÄ Mapa de Procesos
   ‚îú‚îÄ‚îÄ Estructura Organizacional
   ‚îî‚îÄ‚îÄ Normograma

1. CARACTERIZACIONES DE PROCESOS
   ‚îî‚îÄ‚îÄ Vista unificada con PHVA, objetivos, indicadores

2. GOALS INTELLIGENCE (3 niveles)
   ‚îú‚îÄ‚îÄ ESTRAT√âGICOS (Junta Directiva)
   ‚îú‚îÄ‚îÄ T√ÅCTICOS (Macroprocesos)
   ‚îî‚îÄ‚îÄ OPERATIVOS (POA/Servicios)

3. PLAN DE SEGUIMIENTO Y MEDICI√ìN
   ‚îî‚îÄ‚îÄ KPIs autom√°ticos desde objetivos

4. AUDITOR√çAS INTERNAS
   ‚îî‚îÄ‚îÄ Hallazgos ‚Üí No Conformidades autom√°ticas

5. GESTI√ìN DE RIESGOS Y OPORTUNIDADES

6. PLANES DE MEJORA
   ‚îî‚îÄ‚îÄ Alimentados por auditor√≠as y riesgos

7. COMIT√âS CON MEMORIA DECISIONAL (innovaci√≥n clave)
   ‚îî‚îÄ‚îÄ Trazabilidad de decisiones con contexto

8. GESTI√ìN DOCUMENTAL
   ‚îî‚îÄ‚îÄ B√∫squeda inteligente con IA
M√ìDULOS VERTICALES (Post-MVP)
SALUD:
‚îú‚îÄ‚îÄ Habilitaci√≥n (estandarizable)
‚îî‚îÄ‚îÄ PAMEC (personalizable por instituci√≥n)

MANUFACTURA:
‚îî‚îÄ‚îÄ ISO 9001

SERVICIOS:
‚îî‚îÄ‚îÄ Gesti√≥n espec√≠fica del sector
ROADMAP DE DESARROLLO VALIDADO
MES 1: Parametrizaci√≥n Inicial
Objetivo: Establecer la base organizacional completa

Semana 1-2: Planeaci√≥n Estrat√©gica (objetivos 4 perspectivas)
Semana 2-3: Mapa de Procesos (navegaci√≥n visual)
Semana 3-4: Estructura Organizacional + Normograma base

MES 2: Core de Procesos
Objetivo: Implementar Goals Intelligence y caracterizaciones

Semana 1-2: Caracterizaciones de Procesos
Semana 2-3: Plan de Seguimiento y Medici√≥n
Semana 3-4: Jerarqu√≠a Goals Intelligence

MES 3: Gesti√≥n y Mejora
Objetivo: Ciclo PHVA completo

Semana 1-2: Auditor√≠as Internas
Semana 2-3: Riesgos y Oportunidades
Semana 3-4: No Conformidades + Planes de Mejora

MES 4: Inteligencia y Memoria
Objetivo: Diferenciadores clave

Semana 1-2: Comit√©s con Memoria Decisional
Semana 2-3: Actas Inteligentes + Gesti√≥n Documental
Semana 4: Dashboards unificados

INNOVACIONES CLAVE A IMPLEMENTAR
1. Goals Intelligence Jer√°rquico
javascript// Ejemplo de trazabilidad:
Objetivo Estrat√©gico: "Aumentar ventas 20%"
  ‚îî‚Üí Objetivo T√°ctico: "Hospitalizaci√≥n aporta 40% a ventas"
      ‚îî‚Üí Objetivo Operativo: "85% ocupaci√≥n hospitalaria"
          ‚îî‚Üí Indicador: "% camas ocupadas"
              ‚îî‚Üí Impacto: Muestra contribuci√≥n exacta a objetivo estrat√©gico
2. Memoria Decisional de Comit√©s
javascript// Estructura de decisi√≥n:
{
  decision: "Cambiar proveedor de insumos m√©dicos",
  contexto: "Incremento 30% en costos, quejas de calidad",
  alternativas_consideradas: ["Negociar", "Cambiar", "Diversificar"],
  razones_seleccion: "Mejor relaci√≥n calidad-precio en an√°lisis",
  precedentes: [decisiones_similares_anteriores],
  impacto_proyectado: "Reducci√≥n 15% costos",
  fecha: "2025-01-15",
  comite: "Comit√© de Compras",
  responsable: "Juan P√©rez"
}
3. Vista Unificada por Proceso
javascript// Cada l√≠der de proceso ve en una sola pantalla:
{
  caracterizacion: { entradas, salidas, PHVA },
  objetivos: { estrategicos, tacticos, operativos },
  indicadores: { KPIs, metas, tendencias },
  documentos: { procedimientos, formatos, instructivos },
  no_conformidades: { abiertas, en_proceso, cerradas },
  planes_mejora: { activos, completados },
  riesgos: { identificados, controles },
  auditorias: { programadas, hallazgos }
}
PRINCIPIOS DE DESARROLLO

"Entregar r√°pido, no pensar como los gringos" - Iteraciones √°giles con feedback continuo
Core vs Vertical: Separar lo universal de lo personalizable
Parametrizaci√≥n Express: De 3-6 meses a 90 minutos con plantillas inteligentes
IA como Asistente: No reemplaza, potencia las decisiones humanas
Memoria Organizacional: Cada decisi√≥n tiene contexto y trazabilidad

USUARIOS Y SUS NECESIDADES
L√≠der de Proceso (Principal)

Necesita: "Que yo tenga TODO mi proceso cuando entro"
Implementar: Vista unificada con toda la informaci√≥n del proceso

Coordinador de Calidad

Necesita: Gestionar el SGC completo eficientemente
Implementar: Automatizaci√≥n de flujos y trazabilidad total

Gerente/Director

Necesita: Ver impacto de decisiones en objetivos
Implementar: Dashboard estrat√©gico con predicciones

Operativo

Necesita: Acceso simple y limitado
Implementar: Interfaz simplificada solo con lo esencial

ESTADO ACTUAL Y PR√ìXIMOS PASOS
‚úÖ COMPLETADO

Setup inicial del proyecto (Django + React + Docker)
Sistema de autenticaci√≥n JWT
RBAC con 7 roles y 42 permisos
Estructura base del frontend con layout
Usuarios de prueba con diferentes roles

üéØ SIGUIENTE PASO INMEDIATO
NO EMPEZAR A CODIFICAR A√öN. Primero necesitamos:

Definir los requerimientos detallados del M√≥dulo 1: PARAMETRIZACI√ìN INICIAL

Modelos de datos espec√≠ficos
APIs RESTful necesarias
Flujos de usuario (user flows)
Mockups o wireframes b√°sicos
Reglas de negocio


Establecer est√°ndares de c√≥digo

Estructura de carpetas por m√≥dulo
Convenciones de nomenclatura
Patrones de dise√±o a usar
Estrategia de testing


Preparar el entorno de desarrollo

Branches strategy (GitFlow)
CI/CD pipeline b√°sico
Documentaci√≥n t√©cnica



INSTRUCCIONES IMPORTANTES
‚ö†Ô∏è NO GENERES C√ìDIGO TODAV√çA. Este es un proyecto complejo que requiere:

An√°lisis detallado de cada m√≥dulo antes de implementar
Validaci√≥n de requerimientos con stakeholders
Dise√±o de la arquitectura modular escalable
Definici√≥n clara de APIs y contratos de datos

Cuando estemos listos para codificar, trabajaremos m√≥dulo por m√≥dulo siguiendo el roadmap validado, empezando por la Parametrizaci√≥n Inicial que es "la base para todo" seg√∫n nuestra asesora experta, la Dra. Garc√≠a.
CONTEXTO DE VALIDACI√ìN
Este roadmap y arquitectura han sido validados con la Dra. Claudia Garc√≠a, experta en sistemas de gesti√≥n de calidad con 20+ a√±os de experiencia, quien ser√° nuestra gu√≠a durante el desarrollo para asegurar que el sistema resuelva problemas reales del sector.

¬øENTIENDES EL CONTEXTO Y EST√ÅS LISTO PARA AYUDAR CON LA DEFINICI√ìN DETALLADA DE REQUERIMIENTOS ANTES DE CODIFICAR?