🎯 PROMPT DE CONTEXTO PARA CLAUDE CODE - MÓDULO ORGANIZATION
CONTEXTO DEL DESARROLLO ACTUAL
Estás desarrollando el Módulo Organization de ZentraQMS, comenzando con el Wizard de Configuración Inicial - Paso 1: Datos Básicos de la Institución. Este módulo será el núcleo que gestiona toda la información organizacional del sistema, no solo la configuración inicial, sino también la gestión continua de la estrategia, estructura y gobernanza de la organización.
ARQUITECTURA DEL MÓDULO ORGANIZATION
El módulo organization es uno de los módulos core del sistema y contendrá:

Información básica: Datos legales, sedes, contacto
Planeación estratégica: Misión, visión, valores, objetivos
Estructura organizacional: Organigrama, cargos, responsables
Normograma: Marco regulatorio aplicable
Configuración: Preferencias y parametrización

PROYECTO BASE EXISTENTE
Stack Tecnológico Configurado
Backend:
- Django 5.0 + Django REST Framework
- PostgreSQL
- Docker configurado
- Estructura: /backend/

Frontend:
- React 19 + TypeScript + Vite
- Bootstrap 5.3
- Estructura: /frontend/src/
Sistema de Autenticación Implementado
python# Ya existe:
- JWT Authentication funcionando
- Sistema RBAC con 7 roles
- 42 permisos granulares
- Modelos: User, Role, Permission, UserPermission
- Middleware de autenticación


OBJETIVO DE ESTE DESARROLLO
Implementar el Módulo Organization comenzando con el wizard de configuración inicial. Este wizard captura los datos fundamentales en 3 pasos, siendo el Paso 1 el foco actual:

Información Legal y Clasificación: Razón social, NIT, tipo y sector
Sede Principal y Adicionales: Gestión de ubicaciones
Identidad Organizacional: Misión, visión, valores (Paso 2 - futuro)
Vigencias y Períodos: Configuración temporal (Paso 3 - futuro)



📋 TAREAS DE DESARROLLO - MÓDULO ORGANIZATION: PASO 1
🗄️ BACKEND TASKS
1. MODELOS DE DATOS
pythonTASK-001: Crear modelo Organization
- [ ] Campos: razon_social, nombre_comercial, nit, digito_verificacion
- [ ] Campos: tipo_organizacion (choices), sector_economico (choices)
- [ ] Campos: tamaño_empresa (choices), logo, fecha_fundacion
- [ ] Campos: created_at, updated_at, created_by, updated_by
- [ ] Validación de NIT único
- [ ] Método para calcular dígito de verificación
pythonTASK-002: Crear modelo Headquarters (Sedes)
- [ ] Campos: organization (FK), nombre, tipo (principal/sucursal)
- [ ] Campos: direccion, ciudad, departamento, pais
- [ ] Campos: telefono, email, sitio_web
- [ ] Campos: coordenadas_gps (opcional), codigo_postal
- [ ] Campos: is_main (boolean), is_active
- [ ] Constraint: Solo una sede principal por organización
pythonTASK-003: Crear modelo SectorTemplate
- [ ] Campos: sector, nombre_template, descripcion
- [ ] Campos: data_json (configuración predefinida)
- [ ] Campos: is_active, version
- [ ] Método para aplicar template a organización
2. APIS REST
pythonTASK-004: API Organization CRUD
- [ ] GET /api/organization/info/ (obtener datos actuales)
- [ ] POST /api/organization/info/ (crear inicial)
- [ ] PUT /api/organization/info/{id}/ (actualizar)
- [ ] PATCH /api/organization/info/{id}/ (actualización parcial)
pythonTASK-005: API Headquarters CRUD
- [ ] GET /api/organization/headquarters/ (listar todas las sedes)
- [ ] POST /api/organization/headquarters/ (crear sede)
- [ ] PUT /api/organization/headquarters/{id}/ (actualizar sede)
- [ ] DELETE /api/organization/headquarters/{id}/ (eliminar sede)
- [ ] POST /api/organization/headquarters/{id}/set-main/ (establecer como principal)
pythonTASK-006: API de Validaciones
- [ ] POST /api/organization/validate/nit/ (validar NIT y dígito)
- [ ] GET /api/organization/validate/organization-exists/ (verificar si ya existe config)
- [ ] POST /api/organization/validate/email/ (validar formato email)
pythonTASK-007: API de Templates
- [ ] GET /api/organization/templates/sectors/ (listar plantillas por sector)
- [ ] GET /api/organization/templates/{id}/ (obtener detalle plantilla)
- [ ] POST /api/organization/templates/apply/ (aplicar plantilla a organización)
- [ ] GET /api/organization/templates/preview/ (preview antes de aplicar)
3. LÓGICA DE NEGOCIO
pythonTASK-008: Servicio de Validación NIT
- [ ] Algoritmo de cálculo dígito verificación para Colombia
- [ ] Validación de formato (###.###.###-#)
- [ ] Endpoint para guardado parcial (draft)
- [ ] Modelo DraftConfiguration para borradores
- [ ] Limpieza automática de drafts antiguos (>30 días)
- [ ] Merge de draft con datos finales
pythonTASK-010: Sistema de Auditoría
- [ ] Registro de todos los cambios en Organization
- [ ] Log de quién, cuándo y qué cambió
- [ ] Capacidad de rollback
- [ ] API para consultar historial
🎨 FRONTEND TASKS
4. COMPONENTES DE UI
tsxTASK-011: Componente WizardContainer
- [ ] Layout del wizard con stepper (3 pasos)
- [ ] Navegación entre pasos
- [ ] Validación antes de avanzar
- [ ] Indicador de progreso visual
- [ ] Manejo de estado global del wizard
tsxTASK-012: Componente OrganizationBasicForm
- [ ] Formulario con todos los campos básicos
- [ ] Integración con React Hook Form
- [ ] Validaciones con Yup/Zod
- [ ] Manejo de campos requeridos/opcionales
tsxTASK-013: Componente NitInput
- [ ] Input compuesto (NIT + dígito)
- [ ] Formateo automático (###.###.###)
- [ ] Validación en tiempo real
- [ ] Cálculo automático del dígito
- [ ] Feedback visual (✓/✗)
tsxTASK-014: Componente SelectWithOther
- [ ] Select con opción "Otro"
- [ ] Campo de texto condicional
- [ ] Validación dinámica
- [ ] Para sector económico y otros campos
tsxTASK-015: Componente HeadquartersManager
- [ ] Lista de sedes actuales
- [ ] Modal para agregar/editar sede
- [ ] Marcar sede principal
- [ ] Validación de al menos una sede
- [ ] Drag & drop para reordenar
tsxTASK-016: Componente TemplateSelector
- [ ] Dropdown de plantillas disponibles
- [ ] Preview de plantilla en modal
- [ ] Confirmación antes de aplicar
- [ ] Indicador de campos que se sobrescribirán
5. SERVICIOS Y HOOKS
typescriptTASK-017: Hook useOrganization
- [ ] Cargar datos de organización
- [ ] Guardar/actualizar organización
- [ ] Manejo de estado de carga
- [ ] Manejo de errores
- [ ] Cache local
typescriptTASK-018: Hook useAutoSave
- [ ] Debounce de 30 segundos
- [ ] Indicador visual de guardado
- [ ] Recuperación ante fallas
- [ ] Sincronización con backend
- [ ] Detección de cambios
typescriptTASK-019: Servicio de Validaciones
- [ ] Validación de NIT
- [ ] Validación de email
- [ ] Validación de teléfono
- [ ] Validaciones asíncronas
- [ ] Cache de validaciones
typescriptTASK-020: Hook useWizardNavigation
- [ ] Control de navegación entre pasos
- [ ] Validación antes de avanzar
- [ ] Guardado al cambiar de paso
- [ ] Prevención de pérdida de datos
- [ ] Shortcuts de teclado
6. INTEGRACIONES Y UTILIDADES
typescriptTASK-021: Integración con API de Geolocalización
- [ ] Autocompletar ciudad/departamento
- [ ] Validación de direcciones
- [ ] Sugerencias mientras escribe
- [ ] Coordenadas GPS opcionales
typescriptTASK-022: Sistema de Tooltips
- [ ] Componente Tooltip reutilizable
- [ ] Contenido contextual por campo
- [ ] Posicionamiento inteligente
- [ ] Accesible (ARIA)
typescriptTASK-023: Manejo de Errores
- [ ] Interceptor de errores HTTP
- [ ] Mensajes de error amigables
- [ ] Retry automático en fallos de red
- [ ] Logging para debugging
🧪 TESTING TASKS
7. PRUEBAS UNITARIAS
javascriptTASK-024: Tests Backend - Modelos
- [ ] Test validación NIT
- [ ] Test constraint sede principal única
- [ ] Test aplicación de templates
- [ ] Test auditoría de cambios
javascriptTASK-025: Tests Backend - APIs
- [ ] Test CRUD Organization
- [ ] Test CRUD Headquarters
- [ ] Test validaciones
- [ ] Test auto-guardado
javascriptTASK-026: Tests Frontend - Componentes
- [ ] Test formulario principal
- [ ] Test validación NIT
- [ ] Test gestión de sedes
- [ ] Test navegación wizard
javascriptTASK-027: Tests Frontend - Hooks
- [ ] Test useOrganization
- [ ] Test useAutoSave
- [ ] Test useWizardNavigation
8. PRUEBAS DE INTEGRACIÓN
javascriptTASK-028: Tests E2E - Flujo Completo
- [ ] Test crear organización desde cero
- [ ] Test aplicar plantilla
- [ ] Test agregar múltiples sedes
- [ ] Test auto-guardado y recuperación
🎯 DEFINICIÓN DE "DONE"
Para cada tarea:

 Código implementado y funcionando
 Tests unitarios pasando (>80% cobertura)
 Documentación de código (JSDoc/docstrings)
 Code review aprobado
 Sin errores de linting/formatting
 Responsive (mobile/tablet/desktop)
 Accesible (WCAG 2.1 AA)
 Internacionalización preparada

📊 ESTIMACIÓN Y PRIORIDAD
Prioridad Alta (Semana 1)

TASK-001 a TASK-010 (Backend base)
TASK-011, TASK-012 (UI base)

Prioridad Media (Semana 1-2)

TASK-013 a TASK-016 (Componentes específicos)
TASK-017 a TASK-020 (Hooks y servicios)

Prioridad Baja (Semana 2)

TASK-021 a TASK-023 (Integraciones)
TASK-024 a TASK-028 (Testing)

🔄 DEPENDENCIAS
mermaidgraph TD
    A[TASK-001: Modelo Organization] --> B[TASK-004: API Organization]
    A --> C[TASK-002: Modelo Headquarters]
    C --> D[TASK-005: API Headquarters]
    
    B --> E[TASK-017: Hook useOrganization]
    D --> F[TASK-015: HeadquartersManager]
    
    G[TASK-011: WizardContainer] --> H[TASK-012: OrganizationBasicForm]
    H --> I[TASK-013: NitInput]
    H --> J[TASK-014: SelectWithOther]
    
    E --> H
    F --> H
    
    K[TASK-018: useAutoSave] --> H
    L[TASK-020: useWizardNavigation] --> G
    
    style A fill:#e1f5fe
    style G fill:#fff3e0
💡 NOTAS TÉCNICAS
Consideraciones Especiales:

NIT Validation: Implementar algoritmo módulo 11 para Colombia
Auto-save: Usar localStorage como fallback si falla el servidor
Templates: Guardar como JSON para flexibilidad
Headquarters: Implementar soft-delete para mantener historial
Performance: Lazy load del componente de geolocalización
UX: Mostrar spinner sutil durante auto-guardado
Accesibilidad: Todos los campos con labels ARIA apropiados

RUTAS Y ENDPOINTS
Backend URLs
python# organization/urls.py
urlpatterns = [
    # Información básica
    path('api/organization/info/', OrganizationInfoView),
    path('api/organization/info/<int:id>/', OrganizationDetailView),
    
    # Sedes
    path('api/organization/headquarters/', HeadquartersViewSet),
    path('api/organization/headquarters/<int:id>/', HeadquartersDetailView),
    path('api/organization/headquarters/<int:id>/set-main/', SetMainHeadquarters),
    
    # Validaciones
    path('api/organization/validate/nit/', ValidateNIT),
    path('api/organization/validate/organization-exists/', CheckOrganizationExists),
    path('api/organization/validate/email/', ValidateEmail),
    
    # Templates
    path('api/organization/templates/sectors/', SectorTemplatesList),
    path('api/organization/templates/<int:id>/', TemplateDetail),
    path('api/organization/templates/apply/', ApplyTemplate),
    path('api/organization/templates/preview/', PreviewTemplate),
    
    # Auto-guardado
    path('api/organization/draft/', DraftConfiguration),
    path('api/organization/draft/<int:id>/', DraftDetail),
    
    # Wizard
    path('api/organization/setup/status/', SetupStatus),
    path('api/organization/setup/complete/', CompleteSetup),
]
Frontend Routes
typescript// React Router paths
const organizationRoutes = [
  {
    path: '/organization',
    element: <OrganizationLayout />,
    children: [
      { index: true, element: <Navigate to="/organization/dashboard" /> },
      { path: 'dashboard', element: <OrganizationDashboard /> },
      { path: 'setup', element: <SetupWizard /> },
      { path: 'settings', element: <OrganizationSettings /> },
      // Futuras rutas:
      { path: 'strategic', element: <StrategicPlanning /> },
      { path: 'structure', element: <OrganizationalStructure /> },
    ]
  }
];
NAVEGACIÓN EN EL SISTEMA
typescript// Ubicación en el menú principal
const menuItems = [
  {
    title: 'Dashboard',
    icon: 'ri-dashboard-line',
    path: '/dashboard'
  },
  {
    title: 'Organización',  // 🏢 Segundo en el menú
    icon: 'ri-building-line',
    path: '/organization',
    submenu: [
      { 
        title: 'Información General', 
        path: '/organization/dashboard',
        permission: 'organization.view_info'
      },
      { 
        title: 'Configuración Inicial', 
        path: '/organization/setup',
        permission: 'organization.setup_wizard'
      },
      { 
        title: 'Ajustes', 
        path: '/organization/settings',
        permission: 'organization.edit_info'
      }
    ]
  },
  // ... otros módulos futuros (Procesos, Auditorías, etc.)
];
PERMISOS RBAC DEL MÓDULO
python# Nuevos permisos a agregar al sistema
ORGANIZATION_PERMISSIONS = [
    # Permisos básicos
    'organization.view_info',           # Ver información de la organización
    'organization.edit_info',           # Editar información básica
    'organization.delete_info',         # Eliminar información (solo super_admin)
    
    # Gestión de sedes
    'organization.view_headquarters',   # Ver sedes
    'organization.manage_headquarters', # Crear/editar/eliminar sedes
    
    # Configuración estratégica (futuro)
    'organization.manage_strategic',    # Gestionar misión/visión/objetivos
    'organization.manage_structure',    # Gestionar estructura organizacional
    
    # Setup inicial
    'organization.setup_wizard',        # Acceso al wizard de configuración
    'organization.apply_templates',     # Aplicar plantillas sectoriales
]

# Asignación por rol
ROLE_PERMISSIONS = {
    'super_admin': ['organization.*'],  # Todos los permisos
    'admin': ['organization.*'],
    'coordinador': [
        'organization.view_info',
        'organization.edit_info',
        'organization.view_headquarters',
        'organization.manage_headquarters',
        'organization.setup_wizard',
        'organization.apply_templates'
    ],
    'auditor': [
        'organization.view_info',
        'organization.view_headquarters'
    ],
    'consulta': [
        'organization.view_info',
        'organization.view_headquarters'
    ]
}
FLUJO DE NAVEGACIÓN
mermaidgraph TD
    A[Login] --> B{¿Existe Organization?}
    B -->|No| C[Redirect: /organization/setup]
    B -->|Sí| D[Dashboard]
    
    C --> E[Wizard Step 1: Datos Básicos]
    E --> F[Wizard Step 2: Identidad]
    F --> G[Wizard Step 3: Vigencias]
    G --> H[Setup Completo]
    H --> I[/organization/dashboard]
    
    D --> J[Menú Organización]
    J --> I
    
    I --> K[Ver/Editar Información]
    I --> L[Gestionar Sedes]
    I --> M[Configuración]
COMANDOS PARA INICIAR DESARROLLO
bash# Backend - Crear app organization
cd backend
python manage.py startapp organization

# Crear estructura de carpetas del backend
cd organization
mkdir models serializers views services
touch models/{__init__.py,organization.py,headquarters.py,templates.py}
touch serializers/{__init__.py,organization_serializers.py,headquarters_serializers.py}
touch views/{__init__.py,organization_views.py,headquarters_views.py,validation_views.py}
touch services/{__init__.py,nit_validator.py,auto_save_service.py}

# Frontend - Crear estructura del módulo
cd frontend/src
mkdir -p modules/organization/{pages,components,hooks,services,types}
mkdir -p modules/organization/components/{wizard,forms,headquarters,templates}

# Crear archivos base del frontend
touch modules/organization/pages/{OrganizationDashboard.tsx,SetupWizard.tsx}
touch modules/organization/components/wizard/{WizardContainer.tsx,WizardStep.tsx}
touch modules/organization/hooks/{useOrganization.ts,useAutoSave.ts}
touch modules/organization/services/organizationService.ts
CONSIDERACIONES IMPORTANTES

Módulo Central: organization es un módulo core que otros módulos referenciarán
Escalabilidad: Estructura preparada para agregar más funcionalidades organizacionales
Reutilización: Componentes y servicios deben ser reutilizables
Consistencia: Mantener los mismos patrones del sistema existente
Performance: Implementar lazy loading donde sea apropiado
Primera vez vs Edición: Detectar si ya existe configuración
Responsividad: Debe funcionar en mobile/tablet/desktop
Accesibilidad: Labels ARIA, navegación por teclado
Offline: LocalStorage como fallback
Internacionalización: Preparar para múltiples idiomas


INSTRUCCIÓN PARA CLAUDE CODE:
Desarrolla el Módulo Organization siguiendo esta estructura completa. Implementa las tareas en el orden de prioridad establecido, comenzando con los modelos de Django (TASK-001 a TASK-003), luego los serializers y viewsets (TASK-004 a TASK-007). En el frontend, inicia con el WizardContainer y el formulario básico (TASK-011, TASK-012).
Asegúrate de que:

El código sea consistente con los patrones ya establecidos en el proyecto (authentication y authorization)
Todos los endpoints sigan el prefijo /api/organization/
Los componentes React estén en /modules/organization/
Se implemente el auto-guardado cada 30 segundos
La validación de NIT funcione correctamente para Colombia
El módulo sea la base sólida para toda la gestión organizacional del sistema

Comienza ejecutando los comandos de setup y luego implementa las tareas en orden de dependencias.


Errores