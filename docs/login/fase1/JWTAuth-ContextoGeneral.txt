# üîê Sistema de Autenticaci√≥n JWT - Especificaci√≥n Funcional

## üìã Resumen Ejecutivo

Necesito implementar un sistema de autenticaci√≥n robusto y moderno para una aplicaci√≥n web con arquitectura separada (frontend/backend). El sistema debe proporcionar una experiencia de usuario fluida mientras mantiene altos est√°ndares de seguridad.

## üéØ Objetivos del Sistema

### Objetivos Principales:
- Autenticaci√≥n segura basada en tokens JWT (JSON Web Tokens)
- Sistema de autorizaci√≥n RBAC (Role-Based Access Control) flexible y escalable
- Experiencia de usuario sin fricciones con sesiones persistentes
- Escalabilidad horizontal sin estado de sesi√≥n en servidor
- Protecci√≥n contra ataques comunes (fuerza bruta, XSS, CSRF)
- Soporte para futura expansi√≥n a aplicaciones m√≥viles

### Objetivos Secundarios:
- Capacidad de revocar sesiones activas
- Gesti√≥n din√°mica de roles y permisos sin cambios de c√≥digo
- Auditor√≠a completa de cambios en roles y permisos
- Preparaci√≥n para autenticaci√≥n multi-factor (2FA)
- Integraci√≥n con proveedores OAuth2 (Google, GitHub)
- Soporte para delegaci√≥n temporal de permisos

## üèóÔ∏è Arquitectura del Sistema

### Stack Tecnol√≥gico:
- **Backend**: Django 5.0 + Django REST Framework
- **Frontend**: React 19 + TypeScript + Vite
- **Base de Datos**: PostgreSQL
- **Cache/Mensajer√≠a**: Redis
- **Procesamiento As√≠ncrono**: Celery
- **UI Framework**: Bootstrap 5.3

## üîÑ Flujo de Autenticaci√≥n

### 1. **Proceso de Login**

**Flujo Principal:**
1. Usuario ingresa credenciales (email/username + contrase√±a)
2. Frontend env√≠a petici√≥n POST a `/api/auth/login/`
3. Backend valida credenciales contra base de datos
4. Si son v√°lidas, genera par de tokens:
   - **Access Token**: JWT con duraci√≥n corta (15-30 minutos)
     - Incluye: user_id, email, roles b√°sicos
   - **Refresh Token**: JWT con duraci√≥n larga (7-30 d√≠as)
5. Backend carga roles y permisos del usuario
6. Backend retorna tokens + informaci√≥n b√°sica del usuario con roles
7. Frontend almacena tokens y datos de usuario de forma segura
8. Usuario es redirigido seg√∫n su rol principal

**Manejo de Errores:**
- Credenciales inv√°lidas: Retornar error gen√©rico (no revelar si usuario existe)
- Cuenta bloqueada: Informar tiempo restante de bloqueo
- L√≠mite de intentos: Bloquear despu√©s de 5 intentos fallidos
- Sin roles asignados: Redirigir a p√°gina de "Pendiente de Asignaci√≥n"

### 2. **Proceso de Refresh Token**

**Flujo Autom√°tico:**
1. Frontend detecta que access token est√° por expirar (5 minutos antes)
2. Env√≠a refresh token a `/api/auth/refresh/`
3. Backend valida refresh token
4. Genera nuevo access token (y opcionalmente nuevo refresh token)
5. Frontend actualiza tokens almacenados
6. Proceso transparente para el usuario

### 3. **Proceso de Logout**

**Flujo de Cierre de Sesi√≥n:**
1. Usuario hace clic en "Cerrar Sesi√≥n"
2. Frontend env√≠a refresh token a `/api/auth/logout/`
3. Backend a√±ade token a blacklist
4. Frontend limpia tokens almacenados
5. Redirecci√≥n a p√°gina de login
6. Opcional: Notificar otras pesta√±as abiertas

## üõ°Ô∏è Sistema RBAC (Role-Based Access Control)

### Arquitectura de Autorizaci√≥n:

1. **Estructura de Permisos**
   - Formato: `recurso.acci√≥n` (ej: `users.create`, `reports.view`)
   - Acciones est√°ndar: create, read, update, delete, list, approve, export
   - Permisos especiales: admin.*, *.all
   - Agrupaci√≥n l√≥gica por m√≥dulos/recursos

2. **Jerarqu√≠a de Roles**
   - Roles con nivel de prioridad/peso
   - Capacidad de heredar permisos de roles inferiores
   - Roles mutuamente excluyentes opcionales
   - Roles temporales con fecha de expiraci√≥n

3. **Evaluaci√≥n de Permisos**
   ```
   Orden de evaluaci√≥n:
   1. ¬øUsuario est√° activo?
   2. ¬øTiene permiso de superadmin? (*.all)
   3. ¬øTiene el permiso espec√≠fico?
   4. ¬øAlg√∫n rol tiene el permiso?
   5. ¬øTiene permiso wildcard? (resource.*)
   6. Denegar acceso
   ```

4. **Cache de Permisos**
   - Cache en Redis con TTL de 5 minutos
   - Invalidaci√≥n autom√°tica al cambiar roles
   - Cache por usuario + recurso
   - Precarga de permisos frecuentes

5. **Middleware de Autorizaci√≥n (Django)**
   ```python
   # Decoradores para views
   @require_permission('users.create')
   @require_any_role(['admin', 'coordinator'])
   @require_all_permissions(['reports.view', 'reports.export'])
   ```

6. **Guards en Frontend (React)**
   ```typescript
   // Componentes protegidos
   <PermissionGate permission="users.create">
     <CreateUserButton />
   </PermissionGate>
   
   // Renderizado condicional
   {can('reports.export') && <ExportButton />}
   ```

### Gesti√≥n de Roles:

1. **Asignaci√≥n de Roles**
   - Por defecto: rol b√°sico al registrarse
   - Asignaci√≥n manual por administrador
   - Asignaci√≥n autom√°tica por reglas (ej: por departamento)
   - Solicitud y aprobaci√≥n de roles

2. **Auditor√≠a de Roles**
   - Log de todos los cambios de roles/permisos
   - Qui√©n asign√≥, cu√°ndo, por qu√©
   - Historial completo por usuario
   - Reportes de usuarios por rol

3. **Preparaci√≥n para Escalabilidad**
   - Estructura lista para cientos de permisos
   - Soporte para roles din√°micos futuros
   - API extensible para integraciones
   - Migraci√≥n sencilla a ABAC si necesario

## üõ°Ô∏è Caracter√≠sticas de Seguridad

### Medidas Implementadas:

1. **Rate Limiting**
   - M√°ximo 5 intentos de login por IP cada 15 minutos
   - M√°ximo 3 intentos por cuenta cada 10 minutos
   - Implementado con Redis para rendimiento

2. **Validaci√≥n de Contrase√±as**
   - M√≠nimo 8 caracteres
   - Debe contener: may√∫sculas, min√∫sculas, n√∫meros
   - Verificaci√≥n contra contrase√±as comunes
   - No puede ser similar a informaci√≥n del usuario

3. **Protecci√≥n de Tokens**
   - Access tokens de corta duraci√≥n
   - Refresh tokens rotatorios (nuevo token en cada refresh)
   - Blacklist de tokens revocados
   - Tokens firmados con SECRET_KEY segura

4. **Protecci√≥n contra Ataques**
   - CORS configurado estrictamente
   - HTTPS obligatorio en producci√≥n
   - Protecci√≥n CSRF para cookies
   - Sanitizaci√≥n de inputs

## üíª Funcionalidades del Frontend

### Componentes Principales:

1. **LoginPage**
   - Formulario con validaci√≥n en tiempo real
   - Indicador de fuerza de contrase√±a
   - Opci√≥n "Recordarme" (extiende duraci√≥n refresh token)
   - Link a recuperaci√≥n de contrase√±a
   - Mensajes de error contextuales

2. **AuthProvider (Context)**
   - Gesti√≥n centralizada del estado de autenticaci√≥n
   - Auto-refresh de tokens
   - M√©todos: login(), logout(), refresh(), hasPermission(), hasRole()
   - Estado: user, roles, permissions, isAuthenticated, isLoading

3. **ProtectedRoute**
   - HOC para rutas que requieren autenticaci√≥n
   - Verificaci√≥n de roles/permisos requeridos
   - Redirecci√≥n autom√°tica a login si no autenticado
   - P√°gina de "Acceso Denegado" si autenticado pero sin permisos
   - Preservaci√≥n de ruta intentada para redirect post-login

4. **PermissionGate**
   - Componente para renderizado condicional basado en permisos
   - Props: permission, role, fallback, children
   - Evaluaci√≥n en cascada: permiso espec√≠fico > rol > denegado

5. **useAuth Hook**
   - Acceso simple al contexto de autenticaci√≥n
   - Helpers: canAccess(), hasAnyRole(), hasAllRoles()
   - Gesti√≥n de estado de carga
   - Cache de evaluaciones de permisos

6. **usePermissions Hook**
   - Evaluaci√≥n eficiente de permisos
   - Cache con TTL configurable
   - Soporte para permisos din√°micos
   - Validaci√≥n de recursos espec√≠ficos

7. **Interceptor Axios**
   - Adjunta autom√°ticamente access token a requests
   - Maneja errores 401 (token expirado) y 403 (sin permisos)
   - Reintenta request despu√©s de refresh autom√°tico
   - Gesti√≥n centralizada de errores de auth/authz

## üîß Endpoints de API

### Endpoints P√∫blicos:
- `POST /api/auth/login/` - Iniciar sesi√≥n
- `POST /api/auth/register/` - Registro de usuario
- `POST /api/auth/password/reset/` - Solicitar reset de contrase√±a
- `POST /api/auth/password/reset/confirm/` - Confirmar reset

### Endpoints Protegidos (Autenticaci√≥n):
- `POST /api/auth/refresh/` - Renovar access token
- `POST /api/auth/logout/` - Cerrar sesi√≥n
- `GET /api/auth/user/` - Obtener datos del usuario actual
- `PUT /api/auth/user/` - Actualizar perfil
- `POST /api/auth/password/change/` - Cambiar contrase√±a
- `GET /api/auth/permissions/` - Obtener permisos del usuario actual
- `GET /api/auth/roles/` - Obtener roles del usuario actual

### Endpoints de Administraci√≥n (Requieren Permisos):
- `GET /api/admin/users/` - Listar usuarios
- `POST /api/admin/users/{id}/roles/` - Asignar roles a usuario
- `DELETE /api/admin/users/{id}/roles/{roleId}/` - Revocar rol
- `GET /api/admin/roles/` - Listar todos los roles
- `POST /api/admin/roles/` - Crear nuevo rol
- `PUT /api/admin/roles/{id}/` - Actualizar rol
- `GET /api/admin/permissions/` - Listar todos los permisos
- `POST /api/admin/roles/{id}/permissions/` - Asignar permisos a rol
- `GET /api/admin/audit/roles/` - Auditor√≠a de cambios en roles

## üìä Modelos de Datos

### User Model (Extendido):
```
- id (UUID)
- email (√∫nico, requerido)
- username (√∫nico, opcional)
- password (hash bcrypt)
- first_name
- last_name
- is_active
- is_verified
- date_joined
- last_login
- failed_login_attempts
- locked_until
```

### RefreshToken Model:
```
- id
- user (FK)
- token (√∫nico)
- created_at
- expires_at
- is_blacklisted
- ip_address
- user_agent
```

### Role Model (RBAC):
```
- id (UUID)
- name (√∫nico, requerido)
- display_name
- description
- is_active
- created_at
- updated_at
- priority (para jerarqu√≠a)
```

### Permission Model:
```
- id (UUID)
- name (√∫nico, formato: app.model.action)
- display_name
- description
- resource (modelo/recurso)
- action (crear, leer, actualizar, eliminar, aprobar, etc.)
- created_at
```

### UserRole Model:
```
- id
- user (FK)
- role (FK)
- assigned_by (FK User)
- assigned_at
- expires_at (opcional, para roles temporales)
- is_active
- scope (opcional, para roles contextuales)
```

### RolePermission Model:
```
- id
- role (FK)
- permission (FK)
- granted_at
- granted_by (FK User)
```

## üöÄ Funcionalidades Adicionales

### Fase 1 (MVP):
- Login/Logout b√°sico
- Refresh autom√°tico de tokens
- Protecci√≥n de rutas
- Recuperaci√≥n de contrase√±a por email
- RBAC b√°sico con roles predefinidos
- Asignaci√≥n simple de roles √∫nicos por usuario

### Fase 2 (Mejoras):
- Autenticaci√≥n de dos factores (2FA) con TOTP
- Login con OAuth2 (Google, GitHub)
- M√∫ltiples roles por usuario
- Permisos granulares por recurso
- Delegaci√≥n temporal de permisos
- Interfaz de gesti√≥n de roles y permisos
- Historial de cambios de roles

### Fase 3 (Avanzado):
- Biometr√≠a para apps m√≥viles
- Login sin contrase√±a (magic links)
- Roles contextuales (por proyecto, departamento, etc.)
- Pol√≠ticas de acceso basadas en atributos (ABAC)
- Herencia de roles y permisos
- Workflows de aprobaci√≥n para cambios de roles
- An√°lisis de comportamiento an√≥malo en permisos

## üìà M√©tricas y Monitoreo

### KPIs a Rastrear:
- Tiempo promedio de login
- Tasa de fallos de autenticaci√≥n
- N√∫mero de refresh tokens activos
- Intentos de acceso no autorizado
- Tiempo de vida promedio de sesi√≥n
- **RBAC Metrics:**
  - Permisos m√°s utilizados
  - Roles con mayor actividad
  - Intentos de acceso denegados por falta de permisos
  - Tiempo promedio de asignaci√≥n de roles
  - Usuarios sin roles asignados

### Logs y Auditor√≠a:
- Todos los intentos de login (exitosos y fallidos)
- Cambios de contrase√±a
- Activaci√≥n/desactivaci√≥n de 2FA
- Accesos desde nuevas IPs/dispositivos
- **Auditor√≠a RBAC:**
  - Cambios en asignaci√≥n de roles
  - Modificaciones de permisos en roles
  - Accesos denegados con contexto (usuario, recurso, permiso faltante)
  - Uso de permisos cr√≠ticos (delete, approve, export)
  - Escalaci√≥n de privilegios

## üé® Experiencia de Usuario

### Caracter√≠sticas UX:
- Login persistente entre sesiones del navegador
- Indicador visual de sesi√≥n pr√≥xima a expirar
- Auto-logout por inactividad (configurable)
- Sincronizaci√≥n de logout entre pesta√±as
- Mensajes claros y accionables de error
- Transiciones suaves entre estados

### Accesibilidad:
- Navegaci√≥n completa por teclado
- Compatibilidad con lectores de pantalla
- Mensajes de error asociados a campos
- Contraste adecuado en todos los elementos
- Textos alternativos descriptivos

## ‚ö° Optimizaciones de Rendimiento

### Backend:
- Cache de permisos de usuario en Redis (5 minutos)
- Cache de estructura roles-permisos (30 minutos)
- Consultas optimizadas con `select_related()` y `prefetch_related()`
- √çndices en campos de b√∫squeda frecuente
- Paginaci√≥n en listados de sesiones y auditor√≠a
- Bulk loading de permisos al login
- Evaluaci√≥n lazy de permisos complejos

### Frontend:
- Lazy loading de componentes de auth
- Precarga de datos de usuario y permisos tras login
- Cache local de evaluaciones de permisos (sessionStorage)
- Debounce en validaciones de formulario
- Memoizaci√≥n de c√°lculos de permisos
- Prefetch de permisos para rutas pr√≥ximas

## üß™ Testing

### Casos de Prueba Cr√≠ticos:

**Autenticaci√≥n:**
- Login con credenciales v√°lidas/inv√°lidas
- Expiraci√≥n y refresh de tokens
- Logout y blacklist de tokens
- Rate limiting funcionando correctamente
- Protecci√≥n de rutas privadas
- Recuperaci√≥n de contrase√±a end-to-end
- Concurrencia en refresh de tokens
- Comportamiento con m√∫ltiples pesta√±as

**Autorizaci√≥n (RBAC):**
- Asignaci√≥n y revocaci√≥n de roles
- Herencia de permisos entre roles
- Evaluaci√≥n correcta de permisos wildcards
- Cache e invalidaci√≥n de permisos
- Acceso denegado sin permisos apropiados
- Roles temporales expiran correctamente
- M√∫ltiples roles por usuario funcionan
- Auditor√≠a registra todos los cambios
- Performance con miles de permisos

## üìù Consideraciones Finales

Este sistema de autenticaci√≥n y autorizaci√≥n debe balancear seguridad con experiencia de usuario, siendo transparente cuando funciona correctamente pero robusto ante intentos de abuso. 

### Puntos Clave de la Implementaci√≥n:

1. **Arquitectura JWT + RBAC** permite escalabilidad horizontal mientras mantiene control granular de accesos
2. **Sistema de roles flexible** que soporta desde configuraciones simples (un rol por usuario) hasta complejas (m√∫ltiples roles, permisos contextuales)
3. **Cache inteligente** con Redis optimiza las evaluaciones de permisos sin sacrificar seguridad
4. **Auditor√≠a completa** proporciona trazabilidad total de cambios en seguridad
5. **Preparado para el futuro** con estructura que soporta f√°cilmente nuevos roles, permisos y m√≥dulos sin cambios en el core

### Ventajas del Dise√±o RBAC:
- **Mantenibilidad**: Cambios en permisos sin tocar c√≥digo
- **Escalabilidad**: Soporta crecimiento de usuarios y complejidad
- **Compliance**: Auditor√≠a completa para cumplimiento normativo
- **Flexibilidad**: F√°cil adaptaci√≥n a cambios organizacionales
- **Performance**: Cache multicapa minimiza latencia

La integraci√≥n con Redis y Celery optimiza el rendimiento mientras que la arquitectura modular permite agregar o modificar roles y permisos seg√∫n evolucionen las necesidades del sistema de gesti√≥n de calidad.