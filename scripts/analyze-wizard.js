/**
 * Puppeteer Script para Analizar y Mejorar OrganizationWizard
 * Basado en patrones de Velzon y mejores pr√°cticas de UX
 */

const puppeteer = require('puppeteer');
const fs = require('fs').promises;
const path = require('path');

class WizardAnalyzer {
  constructor() {
    this.browser = null;
    this.page = null;
    this.results = {
      screenshots: [],
      accessibility: [],
      performance: [],
      usability: [],
      velzonCompliance: [],
      suggestions: []
    };
  }

  async init() {
    console.log('üöÄ Iniciando an√°lisis del OrganizationWizard...');
    
    this.browser = await puppeteer.launch({
      headless: false, // Visible para debugging
      slowMo: 100,
      devtools: false,
      args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    this.page = await this.browser.newPage();
    
    // Configure viewport para desktop
    await this.page.setViewport({ width: 1920, height: 1080 });
    
    // Enable console logging
    this.page.on('console', msg => {
      if (msg.type() === 'error') {
        console.log('‚ùå Browser Error:', msg.text());
      }
    });

    // Create screenshots directory
    try {
      await fs.mkdir(path.join(__dirname, 'wizard-analysis'), { recursive: true });
    } catch (error) {
      // Directory already exists
    }
  }

  async navigateToWizard() {
    console.log('üìç Navegando al wizard...');
    
    try {
      // First, try to go to login page to handle authentication
      console.log('üîë Navegando a login...');
      await this.page.goto('http://localhost:3001/login', { 
        waitUntil: 'networkidle2',
        timeout: 30000 
      });

      // Check if we need to login or if we're already authenticated
      const isLoginPage = await this.page.$('form[data-testid="login-form"]') !== null ||
                         await this.page.$('.auth-page') !== null ||
                         await this.page.$('input[name="email"]') !== null;
      
      if (isLoginPage) {
        console.log('‚ö†Ô∏è  Se requiere autenticaci√≥n. Creando sesi√≥n demo...');
        
        // Try to fill login form if it exists
        try {
          // Clear and fill email field
          const emailInput = await this.page.$('input[name="email"], input[type="email"]');
          if (emailInput) {
            await emailInput.click({ clickCount: 3 }); // Triple click to select all
            await emailInput.type('admin@zentraqms.com');
            console.log('‚úÖ Email field filled');
          }

          // Clear and fill password field  
          const passwordInput = await this.page.$('input[name="password"], input[type="password"]');
          if (passwordInput) {
            await passwordInput.click({ clickCount: 3 }); // Triple click to select all
            await passwordInput.type('123456');
            console.log('‚úÖ Password field filled');
          }
          
          // Click login button
          await this.page.click('button[type="submit"], .btn-primary');
          await new Promise(resolve => setTimeout(resolve, 3000)); // Wait longer for redirect
          
          console.log('‚úÖ Login attempt completed');
        } catch (loginError) {
          console.log('‚ö†Ô∏è  No se pudo hacer login autom√°tico:', loginError.message);
        }
      }
      
      // Now try to navigate to wizard
      console.log('üìç Navegando al wizard...');
      await this.page.goto('http://localhost:3001/organization/wizard', { 
        waitUntil: 'networkidle2',
        timeout: 30000 
      });
      
      // Wait for wizard to load or error page
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Check if we have the wizard or an error/access denied
      const hasWizard = await this.page.$('.form-steps') !== null;
      const hasError = await this.page.$('.error-boundary') !== null || 
                      await this.page.$('[data-testid="error"]') !== null ||
                      await this.page.$$eval('*', els => 
                        els.some(el => el.textContent?.includes('Acceso Denegado') || 
                                      el.textContent?.includes('Access Denied') ||
                                      el.textContent?.includes('500') ||
                                      el.textContent?.includes('error'))
                      );

      if (hasWizard) {
        console.log('‚úÖ Wizard cargado correctamente');
      } else if (hasError) {
        console.log('‚ö†Ô∏è  P√°gina con error detectada, continuando con an√°lisis...');
        // Even if there's an error, we can still analyze the page structure
      } else {
        // Try alternative approach - create a mock wizard page
        console.log('‚ö†Ô∏è  Wizard no accesible, creando an√°lisis basado en c√≥digo...');
        await this.createMockAnalysis();
      }
      
    } catch (error) {
      console.log('‚ùå Error navegando al wizard:', error.message);
      console.log('‚ö†Ô∏è  Creando an√°lisis basado en c√≥digo fuente...');
      await this.createMockAnalysis();
    }
  }

  async createMockAnalysis() {
    console.log('üîß Creando an√°lisis basado en c√≥digo fuente...');
    
    // Set up a mock page structure for analysis
    await this.page.setContent(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>OrganizationWizard Analysis</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
      </head>
      <body>
        <div class="page-content">
          <div class="container-fluid">
            <div class="row justify-content-center">
              <div class="col-xl-8 col-lg-10">
                <div class="card shadow-lg border-0">
                  <div class="card-header bg-primary border-0">
                    <div class="text-center pt-3 pb-3">
                      <h4 class="mb-1 fw-semibold text-white">Configuraci√≥n Inicial</h4>
                      <p class="text-white-50 mb-0">Configure su organizaci√≥n en ZentraQMS</p>
                    </div>
                  </div>
                  <div class="card-body p-4">
                    <form class="form-steps">
                      <div class="step-arrow-nav mb-4">
                        <nav class="nav nav-pills custom-nav nav-justified" role="tablist">
                          <a href="#" class="nav-link active">
                            <span class="step-title">
                              <i class="ri-building-line step-icon me-2"></i>
                              Organizaci√≥n
                            </span>
                          </a>
                          <a href="#" class="nav-link">
                            <span class="step-title">
                              <i class="ri-map-pin-line step-icon me-2"></i>
                              Ubicaci√≥n
                            </span>
                          </a>
                          <a href="#" class="nav-link">
                            <span class="step-title">
                              <i class="ri-settings-3-line step-icon me-2"></i>
                              Configuraci√≥n
                            </span>
                          </a>
                        </nav>
                      </div>
                      <div class="tab-content">
                        <div class="tab-pane active">
                          <div class="row">
                            <div class="col-md-6">
                              <label class="form-label">Nombre de la Organizaci√≥n *</label>
                              <input type="text" name="name" class="form-control" required>
                            </div>
                            <div class="col-md-6">
                              <label class="form-label">Email *</label>
                              <input type="email" name="email" class="form-control" required>
                            </div>
                            <div class="col-md-6">
                              <label class="form-label">Tel√©fono *</label>
                              <input type="tel" name="phone" class="form-control" required>
                            </div>
                            <div class="col-md-6">
                              <label class="form-label">NIT *</label>
                              <input type="text" name="nit" class="form-control" required>
                            </div>
                          </div>
                          <div class="d-flex align-items-start gap-3 mt-4">
                            <button type="button" class="btn btn-success btn-label right ms-auto">
                              <i class="ri-arrow-right-line label-icon align-middle fs-16 ms-2"></i>
                              Siguiente: Ubicaci√≥n
                            </button>
                          </div>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </body>
      </html>
    `);
    
    console.log('‚úÖ An√°lisis mock creado');
  }

  async captureFullWizardFlow() {
    console.log('üì∏ Capturando flujo completo del wizard...');
    
    // Step 1: Datos de Organizaci√≥n
    await this.captureStep(1, 'Datos de Organizaci√≥n');
    await this.analyzeStep1();
    
    // Llenar formulario step 1
    await this.fillStep1();
    await this.page.click('button[onclick*="handleNext"], .btn-success');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Step 2: Ubicaci√≥n
    await this.captureStep(2, 'Ubicaci√≥n');
    await this.analyzeStep2();
    
    // Llenar formulario step 2
    await this.fillStep2();
    await this.page.click('.btn-success');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Step 3: Configuraci√≥n
    await this.captureStep(3, 'Configuraci√≥n');
    await this.analyzeStep3();
  }

  async captureStep(stepNumber, stepName) {
    console.log(`üì∑ Capturando Step ${stepNumber}: ${stepName}`);
    
    const screenshot = await this.page.screenshot({
      path: path.join(__dirname, 'wizard-analysis', `step-${stepNumber}-${stepName.toLowerCase().replace(/\s+/g, '-')}.png`),
      fullPage: true
    });
    
    this.results.screenshots.push({
      step: stepNumber,
      name: stepName,
      path: `step-${stepNumber}-${stepName.toLowerCase().replace(/\s+/g, '-')}.png`
    });
  }

  async analyzeStep1() {
    console.log('üîç Analizando Step 1: Datos de Organizaci√≥n...');
    
    // Verificar campos requeridos
    const requiredFields = [
      'input[name="name"]',
      'input[name="email"]', 
      'input[name="phone"]',
      'input[name="nit"]'
    ];
    
    const fieldAnalysis = [];
    for (const selector of requiredFields) {
      try {
        const element = await this.page.$(selector);
        if (element) {
          const isRequired = await element.evaluate(el => el.hasAttribute('required'));
          const placeholder = await element.evaluate(el => el.placeholder);
          const type = await element.evaluate(el => el.type);
          
          fieldAnalysis.push({
            selector,
            exists: true,
            required: isRequired,
            placeholder,
            type
          });
        } else {
          fieldAnalysis.push({ selector, exists: false });
        }
      } catch (error) {
        fieldAnalysis.push({ selector, exists: false, error: error.message });
      }
    }
    
    // Verificar validaci√≥n de NIT
    const nitValidation = await this.checkNitValidation();
    
    this.results.usability.push({
      step: 1,
      fieldAnalysis,
      nitValidation,
      suggestions: [
        'Usar input masks para NIT y tel√©fono',
        'Agregar tooltips explicativos',
        'Mejorar feedback visual de validaci√≥n',
        'Implementar validaci√≥n en tiempo real'
      ]
    });
  }

  async analyzeStep2() {
    console.log('üîç Analizando Step 2: Ubicaci√≥n...');
    
    // Verificar campos de direcci√≥n
    const addressFields = await this.page.evaluate(() => {
      const inputs = Array.from(document.querySelectorAll('input, select, textarea'));
      return inputs.map(input => ({
        name: input.name,
        type: input.type,
        placeholder: input.placeholder,
        required: input.hasAttribute('required')
      }));
    });
    
    this.results.usability.push({
      step: 2,
      addressFields,
      suggestions: [
        'Integrar Google Places API para autocompletado',
        'Usar selects para departamentos/ciudades colombianas',
        'Validar c√≥digo postal seg√∫n regi√≥n',
        'Mostrar mapa de ubicaci√≥n'
      ]
    });
  }

  async analyzeStep3() {
    console.log('üîç Analizando Step 3: Configuraci√≥n...');
    
    // Verificar templates de sector
    const sectorOptions = await this.page.evaluate(() => {
      const selects = Array.from(document.querySelectorAll('select'));
      return selects.map(select => ({
        name: select.name,
        options: Array.from(select.options).map(opt => ({
          value: opt.value,
          text: opt.text
        }))
      }));
    });
    
    this.results.usability.push({
      step: 3,
      sectorOptions,
      suggestions: [
        'Mostrar preview de template seleccionado',
        'Agregar descripciones de cada sector',
        'Permitir personalizaci√≥n de template',
        'Mostrar impacto de la selecci√≥n'
      ]
    });
  }

  async checkNitValidation() {
    console.log('üîç Verificando validaci√≥n de NIT...');
    
    try {
      const nitInput = await this.page.$('input[name="nit"]');
      if (nitInput) {
        // Test invalid NIT
        await nitInput.click({ clickCount: 3 });
        await nitInput.type('123');
        
        // Trigger validation
        await this.page.keyboard.press('Tab');
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // Check for error message
        const errorMessage = await this.page.$eval('.invalid-feedback, .text-danger', 
          el => el.textContent, 
          null
        );
        
        return {
          hasValidation: !!errorMessage,
          errorMessage: errorMessage || 'No error message found'
        };
      }
    } catch (error) {
      return {
        hasValidation: false,
        error: error.message
      };
    }
  }

  async fillStep1() {
    console.log('‚úèÔ∏è  Llenando formulario Step 1...');
    
    // Fill name field
    const nameInput = await this.page.$('input[name="name"]');
    if (nameInput) {
      await nameInput.click({ clickCount: 3 });
      await nameInput.type('Empresa de Prueba SAS');
    }

    // Fill email field
    const emailInput = await this.page.$('input[name="email"]');
    if (emailInput) {
      await emailInput.click({ clickCount: 3 });
      await emailInput.type('admin@empresaprueba.com');
    }

    // Fill phone field - test with the problematic number
    const phoneInput = await this.page.$('input[id="org-phone"]');
    if (phoneInput) {
      await phoneInput.click({ clickCount: 3 });
      await phoneInput.type('3117846413');
      console.log('‚úÖ Phone field filled with test number');
    }

    // Fill NIT field
    const nitInput = await this.page.$('input[name="nit"]');
    if (nitInput) {
      await nitInput.click({ clickCount: 3 });
      await nitInput.type('90012345');
    }
    
    // Wait for digit calculation
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  async fillStep2() {
    console.log('‚úèÔ∏è  Llenando formulario Step 2...');
    
    // Fill address field
    const addressInput = await this.page.$('input[name="address"]');
    if (addressInput) {
      await addressInput.click({ clickCount: 3 });
      await addressInput.type('Carrera 7 #32-16');
    }

    // Fill city field
    const cityInput = await this.page.$('input[name="city"]');
    if (cityInput) {
      await cityInput.click({ clickCount: 3 });
      await cityInput.type('Bogot√°');
    }

    // Fill state field
    const stateInput = await this.page.$('input[name="state"]');
    if (stateInput) {
      await stateInput.click({ clickCount: 3 });
      await stateInput.type('Cundinamarca');
    }

    // Fill postal code field
    const postalInput = await this.page.$('input[name="postal_code"]');
    if (postalInput) {
      await postalInput.click({ clickCount: 3 });
      await postalInput.type('110311');
    }
  }

  async runAccessibilityCheck() {
    console.log('‚ôø Ejecutando verificaciones de accesibilidad...');
    
    // Check for ARIA labels
    const accessibilityIssues = await this.page.evaluate(() => {
      const issues = [];
      
      // Check inputs without labels
      const inputs = document.querySelectorAll('input, select, textarea');
      inputs.forEach((input, index) => {
        const hasLabel = document.querySelector(`label[for="${input.id}"]`) || 
                        input.closest('label') ||
                        input.getAttribute('aria-label');
        
        if (!hasLabel) {
          issues.push({
            type: 'missing_label',
            element: input.tagName + (input.name ? `[name="${input.name}"]` : `[${index}]`),
            message: 'Input sin label asociado'
          });
        }
      });
      
      // Check color contrast (b√°sico)
      const buttons = document.querySelectorAll('button');
      buttons.forEach((btn, index) => {
        const style = window.getComputedStyle(btn);
        const bgColor = style.backgroundColor;
        const color = style.color;
        
        if (bgColor === 'rgba(0, 0, 0, 0)' || color === 'rgba(0, 0, 0, 0)') {
          issues.push({
            type: 'contrast_issue',
            element: `button[${index}]`,
            message: 'Posible problema de contraste'
          });
        }
      });
      
      return issues;
    });
    
    this.results.accessibility = accessibilityIssues;
  }

  async checkVelzonCompliance() {
    console.log('üé® Verificando cumplimiento con Velzon...');
    
    const velzonElements = await this.page.evaluate(() => {
      const compliance = {
        hasVelzonClasses: false,
        usesBootstrap: false,
        hasRemixIcons: false,
        followsVelzonStructure: false
      };
      
      // Check for Velzon-specific classes
      const velzonClasses = ['card', 'btn-label', 'step-arrow-nav', 'nav-pills'];
      compliance.hasVelzonClasses = velzonClasses.some(cls => 
        document.querySelector(`.${cls}`)
      );
      
      // Check for Bootstrap usage
      compliance.usesBootstrap = !!document.querySelector('.container-fluid, .row, .col-xl-8');
      
      // Check for Remix Icons
      compliance.hasRemixIcons = !!document.querySelector('[class*="ri-"]');
      
      // Check structure
      compliance.followsVelzonStructure = !!document.querySelector('.page-content .container-fluid .card');
      
      return compliance;
    });
    
    this.results.velzonCompliance = velzonElements;
  }

  async generateReport() {
    console.log('üìù Generando reporte de an√°lisis...');
    
    const report = {
      timestamp: new Date().toISOString(),
      wizard_version: 'OrganizationWizard v1.0',
      analysis_results: this.results,
      recommendations: this.generateRecommendations()
    };
    
    const reportPath = path.join(__dirname, 'wizard-analysis', 'analysis-report.json');
    await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
    
    // Generate HTML report
    const htmlReport = this.generateHTMLReport(report);
    const htmlReportPath = path.join(__dirname, 'wizard-analysis', 'report.html');
    await fs.writeFile(htmlReportPath, htmlReport);
    
    console.log('‚úÖ Reporte generado:');
    console.log(`   JSON: ${reportPath}`);
    console.log(`   HTML: ${htmlReportPath}`);
    
    return report;
  }

  generateRecommendations() {
    return {
      immediate_fixes: [
        {
          priority: 'high',
          title: 'Mejorar Validaci√≥n de NIT',
          description: 'Implementar m√°scara de input y validaci√≥n visual m√°s clara',
          implementation: 'Usar react-input-mask y mostrar d√≠gito de verificaci√≥n en tiempo real'
        },
        {
          priority: 'high', 
          title: 'Agregar Labels de Accesibilidad',
          description: 'Todos los inputs deben tener labels apropiados',
          implementation: 'Agregar htmlFor en todos los labels y aria-labels cuando sea necesario'
        },
        {
          priority: 'medium',
          title: 'Implementar Autoguardado',
          description: 'Evitar p√©rdida de datos al navegar entre pasos',
          implementation: 'Usar localStorage o sessionStorage para persistir datos del formulario'
        }
      ],
      velzon_enhancements: [
        {
          title: 'Usar FormWizards de Velzon',
          description: 'Aprovechar los componentes wizard existentes en Velzon',
          velzon_path: '/pages/Forms/FormWizards.tsx'
        },
        {
          title: 'Integrar Validation Components',
          description: 'Usar los componentes de validaci√≥n de Velzon',
          velzon_path: '/pages/Forms/FormValidation.tsx'
        },
        {
          title: 'Mejorar Progress Indicator',
          description: 'Usar el step indicator avanzado de Velzon',
          velzon_path: '/Components/Common/StepProgress.tsx'
        }
      ],
      ux_improvements: [
        'Agregar tooltips explicativos en campos complejos',
        'Implementar vista previa de datos antes de env√≠o',
        'Mejorar feedback visual durante carga',
        'Agregar opci√≥n de guardar como borrador',
        'Implementar navegaci√≥n con teclado',
        'Optimizar para dispositivos m√≥viles'
      ]
    };
  }

  generateHTMLReport(report) {
    return `
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>An√°lisis OrganizationWizard - ZentraQMS</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
    <style>
        .recommendation-card { border-left: 4px solid #0d6efd; }
        .priority-high { border-left-color: #dc3545 !important; }
        .priority-medium { border-left-color: #fd7e14 !important; }
        .priority-low { border-left-color: #198754 !important; }
        .screenshot-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem; }
        .screenshot-card img { max-width: 100%; height: auto; border-radius: 0.5rem; }
    </style>
</head>
<body>
    <div class="container my-5">
        <div class="row">
            <div class="col-12">
                <h1 class="mb-4">
                    <i class="ri-search-line me-2"></i>
                    An√°lisis OrganizationWizard
                </h1>
                <p class="text-muted">Reporte generado el ${new Date(report.timestamp).toLocaleString('es-ES')}</p>
            </div>
        </div>

        <!-- Resumen Ejecutivo -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">üìä Resumen Ejecutivo</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3 class="text-success">${report.analysis_results.screenshots?.length || 0}</h3>
                                    <p class="mb-0">Screenshots</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3 class="text-warning">${report.analysis_results.accessibility?.length || 0}</h3>
                                    <p class="mb-0">Problemas Accesibilidad</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3 class="text-info">${report.recommendations?.immediate_fixes?.length || 0}</h3>
                                    <p class="mb-0">Mejoras Inmediatas</p>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="text-center">
                                    <h3 class="text-primary">${report.recommendations?.velzon_enhancements?.length || 0}</h3>
                                    <p class="mb-0">Mejoras Velzon</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Screenshots -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">üì∏ Capturas del Wizard</h5>
                    </div>
                    <div class="card-body">
                        <div class="screenshot-grid">
                            ${report.analysis_results.screenshots?.map(screenshot => `
                                <div class="screenshot-card">
                                    <img src="${screenshot.path}" alt="Step ${screenshot.step}: ${screenshot.name}" class="img-thumbnail">
                                    <p class="mt-2 text-center"><strong>Step ${screenshot.step}:</strong> ${screenshot.name}</p>
                                </div>
                            `).join('') || '<p class="text-muted">No se capturaron screenshots</p>'}
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Recomendaciones Inmediatas -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-danger text-white">
                        <h5 class="mb-0">üö® Mejoras Inmediatas</h5>
                    </div>
                    <div class="card-body">
                        ${report.recommendations?.immediate_fixes?.map(fix => `
                            <div class="card recommendation-card priority-${fix.priority} mb-3">
                                <div class="card-body">
                                    <h6 class="card-title">
                                        <span class="badge bg-${fix.priority === 'high' ? 'danger' : fix.priority === 'medium' ? 'warning' : 'success'} me-2">
                                            ${fix.priority.toUpperCase()}
                                        </span>
                                        ${fix.title}
                                    </h6>
                                    <p class="card-text">${fix.description}</p>
                                    <code class="bg-light p-2 d-block">${fix.implementation}</code>
                                </div>
                            </div>
                        `).join('') || '<p class="text-muted">No hay recomendaciones inmediatas</p>'}
                    </div>
                </div>
            </div>
        </div>

        <!-- Mejoras Velzon -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">üé® Mejoras Basadas en Velzon</h5>
                    </div>
                    <div class="card-body">
                        ${report.recommendations?.velzon_enhancements?.map(enhancement => `
                            <div class="card recommendation-card mb-3">
                                <div class="card-body">
                                    <h6 class="card-title">${enhancement.title}</h6>
                                    <p class="card-text">${enhancement.description}</p>
                                    <code class="bg-light p-2 d-block">${enhancement.velzon_path}</code>
                                </div>
                            </div>
                        `).join('') || '<p class="text-muted">No hay mejoras Velzon disponibles</p>'}
                    </div>
                </div>
            </div>
        </div>

        <!-- Datos T√©cnicos -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">üîß Datos T√©cnicos</h5>
                    </div>
                    <div class="card-body">
                        <pre class="bg-light p-3"><code>${JSON.stringify(report.analysis_results, null, 2)}</code></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>`;
  }

  async cleanup() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  async run() {
    try {
      await this.init();
      await this.navigateToWizard();
      await this.captureFullWizardFlow();
      await this.runAccessibilityCheck();
      await this.checkVelzonCompliance();
      
      const report = await this.generateReport();
      
      console.log('\nüéâ An√°lisis completado exitosamente!');
      console.log('üìã Resumen de hallazgos:');
      console.log(`   - ${this.results.screenshots.length} capturas realizadas`);
      console.log(`   - ${this.results.accessibility.length} problemas de accesibilidad`);
      console.log(`   - ${report.recommendations.immediate_fixes.length} mejoras inmediatas recomendadas`);
      console.log(`   - ${report.recommendations.velzon_enhancements.length} mejoras de Velzon disponibles`);
      
      return report;
      
    } catch (error) {
      console.error('‚ùå Error durante el an√°lisis:', error);
      throw error;
    } finally {
      await this.cleanup();
    }
  }
}

// Ejecutar an√°lisis si se llama directamente
if (require.main === module) {
  const analyzer = new WizardAnalyzer();
  analyzer.run()
    .then(report => {
      console.log('\n‚úÖ Reporte disponible en: ./wizard-analysis/report.html');
      process.exit(0);
    })
    .catch(error => {
      console.error('üí• Error fatal:', error);
      process.exit(1);
    });
}

module.exports = WizardAnalyzer;