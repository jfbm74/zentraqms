# Generated by Django 5.0 on 2025-08-15 00:52

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        (
            "organization",
            "0005_remove_location_unique_main_location_per_organization_and_more",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="HealthOrganization",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "codigo_prestador",
                    models.CharField(
                        help_text="Código de 12 dígitos asignado por el Ministerio de Salud en REPS.",
                        max_length=12,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="El código prestador debe tener exactamente 12 dígitos.",
                                regex="^\\d{12}$",
                            )
                        ],
                        verbose_name="código prestador REPS",
                    ),
                ),
                (
                    "verificado_reps",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el código prestador ha sido verificado contra REPS.",
                        verbose_name="verificado en REPS",
                    ),
                ),
                (
                    "fecha_verificacion_reps",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha y hora de la última verificación contra REPS.",
                        null=True,
                        verbose_name="fecha verificación REPS",
                    ),
                ),
                (
                    "datos_reps",
                    models.JSONField(
                        blank=True,
                        help_text="Datos adicionales obtenidos de REPS (nombre, dirección, etc.).",
                        null=True,
                        verbose_name="datos REPS",
                    ),
                ),
                (
                    "naturaleza_juridica",
                    models.CharField(
                        choices=[
                            ("privada", "Privada"),
                            ("publica", "Pública"),
                            ("mixta", "Mixta"),
                        ],
                        help_text="Naturaleza jurídica de la institución de salud.",
                        max_length=10,
                        verbose_name="naturaleza jurídica",
                    ),
                ),
                (
                    "tipo_prestador",
                    models.CharField(
                        choices=[
                            ("IPS", "IPS - Institución Prestadora de Servicios"),
                            ("HOSPITAL", "Hospital"),
                            ("CLINICA", "Clínica"),
                            ("CENTRO_MEDICO", "Centro Médico"),
                            ("LABORATORIO", "Laboratorio Clínico"),
                            ("CENTRO_DIAGNOSTICO", "Centro de Diagnóstico"),
                            ("AMBULATORIO", "Centro Ambulatorio"),
                            ("OTRO", "Otro"),
                        ],
                        default="IPS",
                        help_text="Tipo de prestador de servicios de salud.",
                        max_length=20,
                        verbose_name="tipo de prestador",
                    ),
                ),
                (
                    "nivel_complejidad",
                    models.CharField(
                        choices=[
                            ("I", "Nivel I - Baja Complejidad"),
                            ("II", "Nivel II - Mediana Complejidad"),
                            ("III", "Nivel III - Alta Complejidad"),
                            ("IV", "Nivel IV - Máxima Complejidad"),
                        ],
                        help_text="Nivel de complejidad según capacidad resolutiva.",
                        max_length=3,
                        verbose_name="nivel de complejidad",
                    ),
                ),
                (
                    "representante_tipo_documento",
                    models.CharField(
                        choices=[
                            ("CC", "Cédula de Ciudadanía"),
                            ("CE", "Cédula de Extranjería"),
                            ("PA", "Pasaporte"),
                            ("NIT", "NIT"),
                            ("TI", "Tarjeta de Identidad"),
                        ],
                        help_text="Tipo de documento del representante legal.",
                        max_length=3,
                        verbose_name="tipo documento representante",
                    ),
                ),
                (
                    "representante_numero_documento",
                    models.CharField(
                        help_text="Número de documento del representante legal.",
                        max_length=20,
                        verbose_name="número documento representante",
                    ),
                ),
                (
                    "representante_nombre_completo",
                    models.CharField(
                        help_text="Nombre completo del representante legal.",
                        max_length=200,
                        verbose_name="nombre completo representante",
                    ),
                ),
                (
                    "representante_telefono",
                    models.CharField(
                        help_text="Teléfono de contacto del representante legal.",
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de teléfono debe tener un formato válido.",
                                regex="^\\+?[\\d\\s\\-\\(\\)]{7,15}$",
                            )
                        ],
                        verbose_name="teléfono representante",
                    ),
                ),
                (
                    "representante_email",
                    models.EmailField(
                        help_text="Correo electrónico del representante legal.",
                        max_length=254,
                        verbose_name="email representante",
                    ),
                ),
                (
                    "fecha_habilitacion",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de habilitación inicial de la institución.",
                        null=True,
                        verbose_name="fecha de habilitación",
                    ),
                ),
                (
                    "resolucion_habilitacion",
                    models.CharField(
                        blank=True,
                        help_text="Número de resolución que otorga la habilitación.",
                        max_length=50,
                        verbose_name="resolución de habilitación",
                    ),
                ),
                (
                    "registro_especial",
                    models.CharField(
                        blank=True,
                        help_text="Número de registro especial si aplica.",
                        max_length=50,
                        verbose_name="registro especial",
                    ),
                ),
                (
                    "servicios_habilitados_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Contador de servicios habilitados (se actualiza automáticamente).",
                        verbose_name="cantidad servicios habilitados",
                    ),
                ),
                (
                    "observaciones_salud",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones específicas del perfil de salud.",
                        max_length=1000,
                        verbose_name="observaciones de salud",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "organization",
                    models.OneToOneField(
                        help_text="Organización base a la que pertenece este perfil de salud.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_profile",
                        to="organization.organization",
                        verbose_name="organización",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "organización de salud",
                "verbose_name_plural": "organizaciones de salud",
                "ordering": ["organization__razon_social"],
            },
        ),
        migrations.CreateModel(
            name="HealthService",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "codigo_servicio",
                    models.CharField(
                        help_text="Código del servicio según Resolución 3100/2019.",
                        max_length=10,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="El código del servicio debe tener 3 o 4 dígitos.",
                                regex="^\\d{3,4}$",
                            )
                        ],
                        verbose_name="código del servicio",
                    ),
                ),
                (
                    "nombre_servicio",
                    models.CharField(
                        help_text="Nombre completo del servicio de salud.",
                        max_length=200,
                        verbose_name="nombre del servicio",
                    ),
                ),
                (
                    "grupo_servicio",
                    models.CharField(
                        choices=[
                            ("consulta_externa", "Consulta Externa"),
                            ("apoyo_diagnostico", "Apoyo Diagnóstico"),
                            ("quirurgicos", "Quirúrgicos"),
                            ("internacion", "Internación"),
                            ("cuidados_intensivos", "Cuidados Intensivos"),
                            ("urgencias", "Urgencias"),
                            ("otros", "Otros"),
                        ],
                        help_text="Grupo al que pertenece el servicio.",
                        max_length=25,
                        verbose_name="grupo del servicio",
                    ),
                ),
                (
                    "descripcion_servicio",
                    models.TextField(
                        blank=True,
                        help_text="Descripción detallada del servicio.",
                        max_length=500,
                        verbose_name="descripción del servicio",
                    ),
                ),
                (
                    "fecha_habilitacion",
                    models.DateField(
                        help_text="Fecha en que se habilitó el servicio.",
                        verbose_name="fecha de habilitación",
                    ),
                ),
                (
                    "fecha_vencimiento",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de vencimiento de la habilitación (si aplica).",
                        null=True,
                        verbose_name="fecha de vencimiento",
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("activo", "Activo"),
                            ("suspendido", "Suspendido"),
                            ("cancelado", "Cancelado"),
                            ("en_tramite", "En Trámite"),
                        ],
                        default="activo",
                        help_text="Estado actual del servicio.",
                        max_length=15,
                        verbose_name="estado",
                    ),
                ),
                (
                    "modalidad",
                    models.CharField(
                        choices=[
                            ("intramural", "Intramural"),
                            ("extramural", "Extramural"),
                            ("telemedicina", "Telemedicina"),
                            ("domiciliaria", "Domiciliaria"),
                        ],
                        default="intramural",
                        help_text="Modalidad de prestación del servicio.",
                        max_length=15,
                        verbose_name="modalidad",
                    ),
                ),
                (
                    "capacidad_instalada",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Capacidad instalada para el servicio (camas, consultorios, etc.).",
                        null=True,
                        verbose_name="capacidad instalada",
                    ),
                ),
                (
                    "numero_resolucion",
                    models.CharField(
                        blank=True,
                        help_text="Número de resolución que autoriza el servicio.",
                        max_length=50,
                        verbose_name="número de resolución",
                    ),
                ),
                (
                    "entidad_autorizante",
                    models.CharField(
                        blank=True,
                        help_text="Entidad que autorizó el servicio (Secretaría de Salud, etc.).",
                        max_length=100,
                        verbose_name="entidad autorizante",
                    ),
                ),
                (
                    "fecha_ultima_visita",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de la última visita de habilitación o seguimiento.",
                        null=True,
                        verbose_name="fecha última visita",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones adicionales sobre el servicio.",
                        max_length=500,
                        verbose_name="observaciones",
                    ),
                ),
                (
                    "requiere_autorizacion",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el servicio requiere autorización previa.",
                        verbose_name="requiere autorización",
                    ),
                ),
                (
                    "dias_atencion",
                    models.CharField(
                        blank=True,
                        help_text="Días de la semana en que se presta el servicio.",
                        max_length=50,
                        verbose_name="días de atención",
                    ),
                ),
                (
                    "horario_atencion",
                    models.CharField(
                        blank=True,
                        help_text="Horario de atención del servicio.",
                        max_length=100,
                        verbose_name="horario de atención",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "health_organization",
                    models.ForeignKey(
                        help_text="Organización de salud que presta este servicio.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="organization.healthorganization",
                        verbose_name="organización de salud",
                    ),
                ),
                (
                    "sede_prestacion",
                    models.ForeignKey(
                        help_text="Sede donde se presta el servicio.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_services",
                        to="organization.location",
                        verbose_name="sede de prestación",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "servicio de salud",
                "verbose_name_plural": "servicios de salud",
                "ordering": ["grupo_servicio", "nombre_servicio"],
            },
        ),
        migrations.AddIndex(
            model_name="healthorganization",
            index=models.Index(
                fields=["codigo_prestador"], name="organizatio_codigo__1f5628_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthorganization",
            index=models.Index(
                fields=["nivel_complejidad"], name="organizatio_nivel_c_f13c82_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthorganization",
            index=models.Index(
                fields=["tipo_prestador"], name="organizatio_tipo_pr_f76adf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthorganization",
            index=models.Index(
                fields=["naturaleza_juridica"], name="organizatio_natural_5cd241_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthorganization",
            index=models.Index(
                fields=["verificado_reps"], name="organizatio_verific_f44d3a_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="healthorganization",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted_at__isnull", True)),
                fields=("codigo_prestador",),
                name="unique_active_codigo_prestador",
            ),
        ),
        migrations.AddIndex(
            model_name="healthservice",
            index=models.Index(
                fields=["codigo_servicio"], name="organizatio_codigo__9c4d32_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthservice",
            index=models.Index(fields=["estado"], name="organizatio_estado_1a4897_idx"),
        ),
        migrations.AddIndex(
            model_name="healthservice",
            index=models.Index(
                fields=["grupo_servicio"], name="organizatio_grupo_s_1761cb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthservice",
            index=models.Index(
                fields=["modalidad"], name="organizatio_modalid_4cdf1c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthservice",
            index=models.Index(
                fields=["fecha_vencimiento"], name="organizatio_fecha_v_5fba32_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthservice",
            index=models.Index(
                fields=["health_organization", "estado"],
                name="organizatio_health__feaf7c_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="healthservice",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted_at__isnull", True)),
                fields=("health_organization", "codigo_servicio", "sede_prestacion"),
                name="unique_service_per_organization_location",
            ),
        ),
    ]
