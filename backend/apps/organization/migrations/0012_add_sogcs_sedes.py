# Generated by Django 5.0 on 2025-08-18 15:12

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("organization", "0011_alter_organization_telefono_principal"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="HeadquarterLocation",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "reps_code",
                    models.CharField(
                        help_text="Código único REPS asignado a esta sede.",
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Código REPS debe contener solo números y letras mayúsculas.",
                                regex="^[0-9A-Z]{4,20}$",
                            )
                        ],
                        verbose_name="código REPS sede",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre oficial de la sede según REPS.",
                        max_length=255,
                        verbose_name="nombre de la sede",
                    ),
                ),
                (
                    "sede_type",
                    models.CharField(
                        choices=[
                            ("principal", "Sede Principal"),
                            ("satelite", "Sede Satélite"),
                            ("movil", "Unidad Móvil"),
                            ("domiciliaria", "Atención Domiciliaria"),
                            ("telemedicina", "Centro de Telemedicina"),
                        ],
                        default="principal",
                        help_text="Clasificación de la sede según modalidad de atención.",
                        max_length=20,
                        verbose_name="tipo de sede",
                    ),
                ),
                (
                    "department_code",
                    models.CharField(
                        help_text="Código DIVIPOLA del departamento.",
                        max_length=2,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Código de departamento debe tener 2 dígitos.",
                                regex="^\\d{2}$",
                            )
                        ],
                        verbose_name="código departamento",
                    ),
                ),
                (
                    "department_name",
                    models.CharField(
                        help_text="Nombre del departamento.",
                        max_length=100,
                        verbose_name="nombre departamento",
                    ),
                ),
                (
                    "municipality_code",
                    models.CharField(
                        help_text="Código DIVIPOLA del municipio.",
                        max_length=5,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Código de municipio debe tener 5 dígitos.",
                                regex="^\\d{5}$",
                            )
                        ],
                        verbose_name="código municipio",
                    ),
                ),
                (
                    "municipality_name",
                    models.CharField(
                        help_text="Nombre del municipio.",
                        max_length=100,
                        verbose_name="nombre municipio",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        help_text="Dirección completa de la sede.",
                        verbose_name="dirección",
                    ),
                ),
                (
                    "postal_code",
                    models.CharField(
                        blank=True,
                        help_text="Código postal de la ubicación.",
                        max_length=10,
                        verbose_name="código postal",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Coordenada de latitud.",
                        max_digits=10,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("-90.0")),
                            django.core.validators.MaxValueValidator(Decimal("90.0")),
                        ],
                        verbose_name="latitud",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Coordenada de longitud.",
                        max_digits=11,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("-180.0")),
                            django.core.validators.MaxValueValidator(Decimal("180.0")),
                        ],
                        verbose_name="longitud",
                    ),
                ),
                (
                    "phone_primary",
                    models.CharField(
                        help_text="Teléfono principal de contacto.",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de teléfono inválido.",
                                regex="^\\+?[\\d\\s\\-\\(\\)ext.]{7,25}$",
                            )
                        ],
                        verbose_name="teléfono principal",
                    ),
                ),
                (
                    "phone_secondary",
                    models.CharField(
                        blank=True,
                        help_text="Teléfono secundario de contacto.",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Formato de teléfono inválido.",
                                regex="^\\+?[\\d\\s\\-\\(\\)ext.]{7,25}$",
                            )
                        ],
                        verbose_name="teléfono secundario",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Correo electrónico institucional de la sede.",
                        max_length=254,
                        verbose_name="correo electrónico",
                    ),
                ),
                (
                    "administrative_contact",
                    models.CharField(
                        help_text="Nombre del responsable administrativo de la sede.",
                        max_length=255,
                        verbose_name="contacto administrativo",
                    ),
                ),
                (
                    "administrative_contact_phone",
                    models.CharField(
                        blank=True,
                        help_text="Teléfono del contacto administrativo.",
                        max_length=20,
                        verbose_name="teléfono contacto administrativo",
                    ),
                ),
                (
                    "administrative_contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email del contacto administrativo.",
                        max_length=254,
                        verbose_name="email contacto administrativo",
                    ),
                ),
                (
                    "habilitation_status",
                    models.CharField(
                        choices=[
                            ("habilitada", "Habilitada"),
                            ("en_proceso", "En Proceso"),
                            ("suspendida", "Suspendida"),
                            ("cancelada", "Cancelada"),
                            ("vencida", "Vencida"),
                        ],
                        default="en_proceso",
                        help_text="Estado actual de habilitación según REPS.",
                        max_length=20,
                        verbose_name="estado de habilitación",
                    ),
                ),
                (
                    "habilitation_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de habilitación inicial.",
                        null=True,
                        verbose_name="fecha de habilitación",
                    ),
                ),
                (
                    "habilitation_resolution",
                    models.CharField(
                        blank=True,
                        help_text="Número de resolución que otorga la habilitación.",
                        max_length=50,
                        verbose_name="resolución de habilitación",
                    ),
                ),
                (
                    "next_renewal_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha programada para renovación de habilitación.",
                        null=True,
                        verbose_name="fecha próxima renovación",
                    ),
                ),
                (
                    "operational_status",
                    models.CharField(
                        choices=[
                            ("activa", "Activa"),
                            ("inactiva", "Inactiva"),
                            ("temporal_cerrada", "Cerrada Temporalmente"),
                            ("permanente_cerrada", "Cerrada Permanentemente"),
                            ("en_construccion", "En Construcción"),
                        ],
                        default="activa",
                        help_text="Estado operativo actual de la sede.",
                        max_length=25,
                        verbose_name="estado operacional",
                    ),
                ),
                (
                    "opening_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de inicio de operaciones.",
                        null=True,
                        verbose_name="fecha de apertura",
                    ),
                ),
                (
                    "closing_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de cierre (si aplica).",
                        null=True,
                        verbose_name="fecha de cierre",
                    ),
                ),
                (
                    "suspension_start",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de inicio de suspensión temporal.",
                        null=True,
                        verbose_name="inicio de suspensión",
                    ),
                ),
                (
                    "suspension_end",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de fin de suspensión temporal.",
                        null=True,
                        verbose_name="fin de suspensión",
                    ),
                ),
                (
                    "suspension_reason",
                    models.TextField(
                        blank=True,
                        help_text="Motivo de la suspensión temporal.",
                        verbose_name="razón de suspensión",
                    ),
                ),
                (
                    "total_beds",
                    models.IntegerField(
                        default=0,
                        help_text="Número total de camas instaladas.",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="total de camas",
                    ),
                ),
                (
                    "icu_beds",
                    models.IntegerField(
                        default=0,
                        help_text="Número de camas de UCI.",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="camas UCI",
                    ),
                ),
                (
                    "emergency_beds",
                    models.IntegerField(
                        default=0,
                        help_text="Número de camas de urgencias.",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="camas de urgencias",
                    ),
                ),
                (
                    "surgery_rooms",
                    models.IntegerField(
                        default=0,
                        help_text="Número de quirófanos.",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="quirófanos",
                    ),
                ),
                (
                    "consultation_rooms",
                    models.IntegerField(
                        default=0,
                        help_text="Número de consultorios.",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="consultorios",
                    ),
                ),
                (
                    "last_reps_sync",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha y hora de la última sincronización con REPS.",
                        null=True,
                        verbose_name="última sincronización REPS",
                    ),
                ),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pendiente"),
                            ("in_progress", "En Proceso"),
                            ("success", "Exitoso"),
                            ("failed", "Fallido"),
                            ("partial", "Parcial"),
                        ],
                        default="pending",
                        help_text="Estado actual de sincronización con REPS.",
                        max_length=15,
                        verbose_name="estado de sincronización",
                    ),
                ),
                (
                    "sync_errors",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de errores encontrados en la última sincronización.",
                        verbose_name="errores de sincronización",
                    ),
                ),
                (
                    "reps_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Datos adicionales obtenidos de REPS.",
                        verbose_name="datos REPS",
                    ),
                ),
                (
                    "is_main_headquarters",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si es la sede principal de la organización.",
                        verbose_name="es sede principal",
                    ),
                ),
                (
                    "working_hours",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Horario de atención por día de la semana.",
                        verbose_name="horario de atención",
                    ),
                ),
                (
                    "has_emergency_service",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si la sede cuenta con servicio de urgencias.",
                        verbose_name="tiene servicio de urgencias",
                    ),
                ),
                (
                    "observations",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones adicionales sobre la sede.",
                        verbose_name="observaciones",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="Organización de salud a la que pertenece esta sede.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="headquarters_locations",
                        to="organization.healthorganization",
                        verbose_name="organización de salud",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "sede prestadora SOGCS",
                "verbose_name_plural": "sedes prestadoras SOGCS",
                "ordering": ["organization", "name"],
            },
        ),
        migrations.CreateModel(
            name="EnabledHealthService",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "service_code",
                    models.CharField(
                        help_text="Código REPS del servicio según Res. 3100/2019.",
                        max_length=10,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="El código del servicio debe tener 3 o 4 dígitos.",
                                regex="^\\d{3,4}$",
                            )
                        ],
                        verbose_name="código del servicio",
                    ),
                ),
                (
                    "cups_code",
                    models.CharField(
                        blank=True,
                        help_text="Código CUPS asociado al servicio.",
                        max_length=10,
                        verbose_name="código CUPS",
                    ),
                ),
                (
                    "service_name",
                    models.CharField(
                        help_text="Nombre oficial del servicio de salud.",
                        max_length=255,
                        verbose_name="nombre del servicio",
                    ),
                ),
                (
                    "service_group",
                    models.CharField(
                        choices=[
                            ("consulta_externa", "Consulta Externa"),
                            (
                                "apoyo_diagnostico",
                                "Apoyo Diagnóstico y Complementación Terapéutica",
                            ),
                            ("internacion", "Internación"),
                            ("quirurgicos", "Quirúrgicos"),
                            ("urgencias", "Urgencias"),
                            ("transporte_asistencial", "Transporte Asistencial"),
                            ("otros_servicios", "Otros Servicios"),
                            (
                                "proteccion_especifica",
                                "Protección Específica y Detección Temprana",
                            ),
                        ],
                        help_text="Grupo al que pertenece el servicio según Res. 3100/2019.",
                        max_length=30,
                        verbose_name="grupo del servicio",
                    ),
                ),
                (
                    "complexity_level",
                    models.IntegerField(
                        choices=[
                            (1, "Baja Complejidad"),
                            (2, "Media Complejidad"),
                            (3, "Alta Complejidad"),
                            (4, "Máxima Complejidad"),
                        ],
                        help_text="Nivel de complejidad del servicio.",
                        verbose_name="nivel de complejidad",
                    ),
                ),
                (
                    "intramural",
                    models.BooleanField(
                        default=False,
                        help_text="Servicio prestado dentro de las instalaciones.",
                        verbose_name="intramural",
                    ),
                ),
                (
                    "extramural",
                    models.BooleanField(
                        default=False,
                        help_text="Servicio prestado fuera de las instalaciones.",
                        verbose_name="extramural",
                    ),
                ),
                (
                    "domiciliary",
                    models.BooleanField(
                        default=False,
                        help_text="Servicio prestado en domicilio.",
                        verbose_name="domiciliario",
                    ),
                ),
                (
                    "telemedicine",
                    models.BooleanField(
                        default=False,
                        help_text="Servicio prestado por telemedicina.",
                        verbose_name="telemedicina",
                    ),
                ),
                (
                    "reference_center",
                    models.BooleanField(
                        default=False,
                        help_text="Es centro de referencia para este servicio.",
                        verbose_name="centro de referencia",
                    ),
                ),
                (
                    "habilitation_status",
                    models.CharField(
                        choices=[
                            ("activo", "Activo"),
                            ("suspendido", "Suspendido"),
                            ("cancelado", "Cancelado"),
                            ("en_renovacion", "En Renovación"),
                            ("vencido", "Vencido"),
                        ],
                        default="activo",
                        help_text="Estado actual de habilitación del servicio.",
                        max_length=20,
                        verbose_name="estado de habilitación",
                    ),
                ),
                (
                    "habilitation_date",
                    models.DateField(
                        help_text="Fecha de habilitación del servicio.",
                        verbose_name="fecha de habilitación",
                    ),
                ),
                (
                    "habilitation_expiry",
                    models.DateField(
                        help_text="Fecha de vencimiento de la habilitación.",
                        verbose_name="fecha de vencimiento",
                    ),
                ),
                (
                    "habilitation_act",
                    models.CharField(
                        help_text="Número del acto administrativo de habilitación.",
                        max_length=50,
                        verbose_name="acto administrativo",
                    ),
                ),
                (
                    "distinctive_code",
                    models.CharField(
                        help_text="Código distintivo único del servicio.",
                        max_length=20,
                        unique=True,
                        verbose_name="código distintivo",
                    ),
                ),
                (
                    "installed_capacity",
                    models.JSONField(
                        default=dict,
                        help_text="Capacidad instalada por tipo de recurso.",
                        verbose_name="capacidad instalada",
                    ),
                ),
                (
                    "operational_capacity",
                    models.JSONField(
                        default=dict,
                        help_text="Capacidad operativa efectiva.",
                        verbose_name="capacidad operativa",
                    ),
                ),
                (
                    "monthly_production",
                    models.IntegerField(
                        default=0,
                        help_text="Producción mensual promedio del servicio.",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="producción mensual",
                    ),
                ),
                (
                    "required_professionals",
                    models.JSONField(
                        default=dict,
                        help_text="Profesionales requeridos por tipo según normativa.",
                        verbose_name="profesionales requeridos",
                    ),
                ),
                (
                    "current_professionals",
                    models.JSONField(
                        default=dict,
                        help_text="Profesionales actualmente asignados.",
                        verbose_name="profesionales actuales",
                    ),
                ),
                (
                    "infrastructure_compliance",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Porcentaje de cumplimiento de infraestructura (0-100).",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="cumplimiento infraestructura",
                    ),
                ),
                (
                    "equipment_compliance",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Porcentaje de cumplimiento de dotación (0-100).",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="cumplimiento dotación",
                    ),
                ),
                (
                    "medication_compliance",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Porcentaje de cumplimiento de medicamentos (0-100).",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="cumplimiento medicamentos",
                    ),
                ),
                (
                    "specific_standards",
                    models.JSONField(
                        default=dict,
                        help_text="Estándares específicos según Res. 3100/2019.",
                        verbose_name="estándares específicos",
                    ),
                ),
                (
                    "last_self_evaluation",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de la última autoevaluación.",
                        null=True,
                        verbose_name="última autoevaluación",
                    ),
                ),
                (
                    "self_evaluation_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Puntaje de la última autoevaluación (0-100).",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="puntaje autoevaluación",
                    ),
                ),
                (
                    "last_external_audit",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de la última auditoría externa.",
                        null=True,
                        verbose_name="última auditoría externa",
                    ),
                ),
                (
                    "external_audit_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Puntaje de la última auditoría externa (0-100).",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="puntaje auditoría externa",
                    ),
                ),
                (
                    "quality_indicators",
                    models.JSONField(
                        default=dict,
                        help_text="Indicadores de calidad según Res. 256/2016.",
                        verbose_name="indicadores de calidad",
                    ),
                ),
                (
                    "patient_safety_events",
                    models.IntegerField(
                        default=0,
                        help_text="Número de eventos adversos de seguridad del paciente.",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="eventos de seguridad del paciente",
                    ),
                ),
                (
                    "service_hours",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Horario de atención del servicio.",
                        verbose_name="horario del servicio",
                    ),
                ),
                (
                    "requires_authorization",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el servicio requiere autorización previa.",
                        verbose_name="requiere autorización",
                    ),
                ),
                (
                    "observations",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones adicionales sobre el servicio.",
                        verbose_name="observaciones",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "interdependencies",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Servicios de los que depende este servicio.",
                        related_name="dependent_services",
                        to="organization.enabledhealthservice",
                        verbose_name="interdependencias",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
                (
                    "headquarters",
                    models.ForeignKey(
                        help_text="Sede donde se presta el servicio.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enabled_services",
                        to="organization.headquarterlocation",
                        verbose_name="sede",
                    ),
                ),
            ],
            options={
                "verbose_name": "servicio habilitado",
                "verbose_name_plural": "servicios habilitados",
                "ordering": ["headquarters", "service_group", "service_name"],
            },
        ),
        migrations.CreateModel(
            name="ServiceHabilitationProcess",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "service_code",
                    models.CharField(
                        help_text="Código del servicio a habilitar.",
                        max_length=10,
                        verbose_name="código del servicio",
                    ),
                ),
                (
                    "service_name",
                    models.CharField(
                        help_text="Nombre del servicio a habilitar.",
                        max_length=255,
                        verbose_name="nombre del servicio",
                    ),
                ),
                (
                    "process_type",
                    models.CharField(
                        choices=[
                            ("nueva", "Nueva Habilitación"),
                            ("renovacion", "Renovación"),
                            ("modificacion", "Modificación"),
                            ("ampliacion", "Ampliación"),
                        ],
                        help_text="Tipo de proceso de habilitación.",
                        max_length=20,
                        verbose_name="tipo de proceso",
                    ),
                ),
                (
                    "current_status",
                    models.CharField(
                        choices=[
                            ("iniciado", "Iniciado"),
                            ("documentacion", "Recopilación de Documentos"),
                            ("autoevaluacion", "Autoevaluación"),
                            ("radicado", "Radicado"),
                            ("en_revision", "En Revisión"),
                            ("visita_programada", "Visita Programada"),
                            ("visita_realizada", "Visita Realizada"),
                            ("concepto_emitido", "Concepto Emitido"),
                            ("aprobado", "Aprobado"),
                            ("rechazado", "Rechazado"),
                            ("desistido", "Desistido"),
                        ],
                        default="iniciado",
                        help_text="Estado actual del proceso.",
                        max_length=20,
                        verbose_name="estado actual",
                    ),
                ),
                (
                    "current_phase",
                    models.CharField(
                        choices=[
                            ("preparacion", "Preparación"),
                            ("autoevaluacion", "Autoevaluación"),
                            ("radicacion", "Radicación"),
                            ("verificacion", "Verificación"),
                            ("resolucion", "Resolución"),
                            ("seguimiento", "Seguimiento"),
                        ],
                        default="preparacion",
                        help_text="Fase actual del proceso.",
                        max_length=20,
                        verbose_name="fase actual",
                    ),
                ),
                (
                    "required_documents",
                    models.JSONField(
                        default=dict,
                        help_text="Lista de documentos requeridos para el proceso.",
                        verbose_name="documentos requeridos",
                    ),
                ),
                (
                    "submitted_documents",
                    models.JSONField(
                        default=dict,
                        help_text="Documentos ya presentados.",
                        verbose_name="documentos presentados",
                    ),
                ),
                (
                    "pending_documents",
                    models.JSONField(
                        default=list,
                        help_text="Lista de documentos pendientes.",
                        verbose_name="documentos pendientes",
                    ),
                ),
                (
                    "self_evaluation_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de realización de la autoevaluación.",
                        null=True,
                        verbose_name="fecha de autoevaluación",
                    ),
                ),
                (
                    "self_evaluation_result",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Resultados de la autoevaluación.",
                        verbose_name="resultado autoevaluación",
                    ),
                ),
                (
                    "self_evaluation_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Puntaje obtenido en la autoevaluación (0-100).",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="puntaje autoevaluación",
                    ),
                ),
                (
                    "improvement_plan",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Plan de mejoramiento derivado de la autoevaluación.",
                        verbose_name="plan de mejoramiento",
                    ),
                ),
                (
                    "submission_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de radicación ante la autoridad.",
                        null=True,
                        verbose_name="fecha de radicación",
                    ),
                ),
                (
                    "submission_number",
                    models.CharField(
                        blank=True,
                        help_text="Número de radicación asignado.",
                        max_length=50,
                        verbose_name="número de radicación",
                    ),
                ),
                (
                    "health_secretary",
                    models.CharField(
                        blank=True,
                        help_text="Secretaría de salud donde se radicó.",
                        max_length=100,
                        verbose_name="secretaría de salud",
                    ),
                ),
                (
                    "verification_scheduled",
                    models.DateField(
                        blank=True,
                        help_text="Fecha programada para la visita de verificación.",
                        null=True,
                        verbose_name="visita programada",
                    ),
                ),
                (
                    "verification_completed",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de realización de la visita.",
                        null=True,
                        verbose_name="visita realizada",
                    ),
                ),
                (
                    "verification_report",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Informe de la visita de verificación.",
                        verbose_name="informe de verificación",
                    ),
                ),
                (
                    "verification_findings",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Hallazgos encontrados durante la verificación.",
                        verbose_name="hallazgos de verificación",
                    ),
                ),
                (
                    "resolution_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de emisión de la resolución.",
                        null=True,
                        verbose_name="fecha de resolución",
                    ),
                ),
                (
                    "resolution_number",
                    models.CharField(
                        blank=True,
                        help_text="Número de la resolución emitida.",
                        max_length=50,
                        verbose_name="número de resolución",
                    ),
                ),
                (
                    "resolution_result",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("aprobado", "Aprobado"),
                            ("aprobado_condicionado", "Aprobado con Condiciones"),
                            ("rechazado", "Rechazado"),
                            ("desistido", "Desistido"),
                        ],
                        help_text="Resultado de la resolución.",
                        max_length=25,
                        verbose_name="resultado de resolución",
                    ),
                ),
                (
                    "conditions_imposed",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Condiciones impuestas en la resolución.",
                        verbose_name="condiciones impuestas",
                    ),
                ),
                (
                    "follow_up_actions",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Acciones de seguimiento requeridas.",
                        verbose_name="acciones de seguimiento",
                    ),
                ),
                (
                    "compliance_deadline",
                    models.DateField(
                        blank=True,
                        help_text="Fecha límite para cumplir con las condiciones.",
                        null=True,
                        verbose_name="fecha límite de cumplimiento",
                    ),
                ),
                (
                    "process_duration_days",
                    models.IntegerField(
                        blank=True,
                        help_text="Duración total del proceso en días.",
                        null=True,
                        verbose_name="duración del proceso (días)",
                    ),
                ),
                (
                    "assigned_inspector",
                    models.CharField(
                        blank=True,
                        help_text="Inspector asignado al proceso.",
                        max_length=255,
                        verbose_name="inspector asignado",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Notas adicionales sobre el proceso.",
                        verbose_name="notas",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "headquarters",
                    models.ForeignKey(
                        help_text="Sede donde se habilitará el servicio.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="habilitation_processes",
                        to="organization.headquarterlocation",
                        verbose_name="sede",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "proceso de habilitación",
                "verbose_name_plural": "procesos de habilitación",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="headquarterlocation",
            index=models.Index(
                fields=["organization", "operational_status"],
                name="organizatio_organiz_7b000a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="headquarterlocation",
            index=models.Index(
                fields=["reps_code"], name="organizatio_reps_co_5cc034_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="headquarterlocation",
            index=models.Index(
                fields=["habilitation_status"], name="organizatio_habilit_f7c648_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="headquarterlocation",
            index=models.Index(
                fields=["department_code", "municipality_code"],
                name="organizatio_departm_8fae6b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="headquarterlocation",
            index=models.Index(
                fields=["sync_status"], name="organizatio_sync_st_6c37ee_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="headquarterlocation",
            index=models.Index(
                fields=["next_renewal_date"], name="organizatio_next_re_8f490f_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="headquarterlocation",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("deleted_at__isnull", True), ("is_main_headquarters", True)
                ),
                fields=("organization",),
                name="unique_main_headquarters_per_org",
            ),
        ),
        migrations.AddIndex(
            model_name="enabledhealthservice",
            index=models.Index(
                fields=["service_code", "habilitation_status"],
                name="organizatio_service_1fd968_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="enabledhealthservice",
            index=models.Index(
                fields=["headquarters", "complexity_level"],
                name="organizatio_headqua_a8a186_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="enabledhealthservice",
            index=models.Index(
                fields=["habilitation_expiry"], name="organizatio_habilit_607637_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enabledhealthservice",
            index=models.Index(
                fields=["service_group"], name="organizatio_service_311e02_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enabledhealthservice",
            index=models.Index(
                fields=["distinctive_code"], name="organizatio_distinc_085cc1_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="enabledhealthservice",
            unique_together={("headquarters", "service_code")},
        ),
        migrations.AddIndex(
            model_name="servicehabilitationprocess",
            index=models.Index(
                fields=["headquarters", "current_status"],
                name="organizatio_headqua_8bb992_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="servicehabilitationprocess",
            index=models.Index(
                fields=["service_code"], name="organizatio_service_c77842_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicehabilitationprocess",
            index=models.Index(
                fields=["current_status", "current_phase"],
                name="organizatio_current_611f1d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="servicehabilitationprocess",
            index=models.Index(
                fields=["submission_date"], name="organizatio_submiss_c69546_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servicehabilitationprocess",
            index=models.Index(
                fields=["compliance_deadline"], name="organizatio_complia_f1be92_idx"
            ),
        ),
    ]
