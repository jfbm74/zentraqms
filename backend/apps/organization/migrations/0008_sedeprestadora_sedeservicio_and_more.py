# Generated by Django 5.0 on 2025-08-15 13:04

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("organization", "0007_suhextraction_suhdiscrepancy_suhdatamapping_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SedePrestadora",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "numero_sede",
                    models.CharField(
                        help_text="Número único de identificación de la sede (ej: 01, 02, 03)",
                        max_length=10,
                        verbose_name="número de sede",
                    ),
                ),
                (
                    "codigo_prestador",
                    models.CharField(
                        help_text="Código de habilitación del prestador para esta sede",
                        max_length=20,
                        verbose_name="código de prestador",
                    ),
                ),
                (
                    "nombre_sede",
                    models.CharField(
                        help_text="Nombre descriptivo de la sede.",
                        max_length=200,
                        verbose_name="nombre de la sede",
                    ),
                ),
                (
                    "tipo_sede",
                    models.CharField(
                        choices=[
                            ("principal", "Sede Principal"),
                            ("sucursal", "Sucursal"),
                            ("ambulatoria", "Sede Ambulatoria"),
                            ("hospitalaria", "Sede Hospitalaria"),
                            ("administrativa", "Sede Administrativa"),
                            ("diagnostico", "Centro de Diagnóstico"),
                            ("urgencias", "Centro de Urgencias"),
                        ],
                        default="sucursal",
                        help_text="Tipo o clasificación de la sede.",
                        max_length=20,
                        verbose_name="tipo de sede",
                    ),
                ),
                (
                    "es_sede_principal",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si es la sede principal de la organización",
                        verbose_name="es sede principal",
                    ),
                ),
                (
                    "direccion",
                    models.CharField(
                        help_text="Dirección completa de la sede.",
                        max_length=255,
                        verbose_name="dirección",
                    ),
                ),
                (
                    "departamento",
                    models.CharField(
                        help_text="Departamento donde se encuentra la sede.",
                        max_length=100,
                        verbose_name="departamento",
                    ),
                ),
                (
                    "municipio",
                    models.CharField(
                        help_text="Municipio donde se encuentra la sede.",
                        max_length=100,
                        verbose_name="municipio",
                    ),
                ),
                (
                    "barrio",
                    models.CharField(
                        blank=True,
                        help_text="Barrio donde se encuentra la sede.",
                        max_length=100,
                        verbose_name="barrio",
                    ),
                ),
                (
                    "codigo_postal",
                    models.CharField(
                        blank=True,
                        help_text="Código postal de la dirección.",
                        max_length=10,
                        verbose_name="código postal",
                    ),
                ),
                (
                    "latitud",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Coordenada latitud de la sede.",
                        max_digits=10,
                        null=True,
                        verbose_name="latitud",
                    ),
                ),
                (
                    "longitud",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Coordenada longitud de la sede.",
                        max_digits=10,
                        null=True,
                        verbose_name="longitud",
                    ),
                ),
                (
                    "telefono_principal",
                    models.CharField(
                        help_text="Teléfono principal de contacto de la sede.",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de teléfono debe tener un formato válido.",
                                regex="^\\+?[\\d\\s\\-\\(\\)]{7,20}$",
                            )
                        ],
                        verbose_name="teléfono principal",
                    ),
                ),
                (
                    "telefono_secundario",
                    models.CharField(
                        blank=True,
                        help_text="Teléfono secundario de contacto de la sede.",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de teléfono debe tener un formato válido.",
                                regex="^\\+?[\\d\\s\\-\\(\\)]{7,20}$",
                            )
                        ],
                        verbose_name="teléfono secundario",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Correo electrónico de contacto de la sede.",
                        max_length=254,
                        verbose_name="email de contacto",
                    ),
                ),
                (
                    "nombre_responsable",
                    models.CharField(
                        help_text="Nombre completo del responsable de la sede.",
                        max_length=200,
                        verbose_name="nombre del responsable",
                    ),
                ),
                (
                    "cargo_responsable",
                    models.CharField(
                        help_text="Cargo o posición del responsable de la sede.",
                        max_length=100,
                        verbose_name="cargo del responsable",
                    ),
                ),
                (
                    "telefono_responsable",
                    models.CharField(
                        blank=True,
                        help_text="Teléfono del responsable de la sede.",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de teléfono debe tener un formato válido.",
                                regex="^\\+?[\\d\\s\\-\\(\\)]{7,20}$",
                            )
                        ],
                        verbose_name="teléfono del responsable",
                    ),
                ),
                (
                    "email_responsable",
                    models.EmailField(
                        blank=True,
                        help_text="Correo electrónico del responsable de la sede.",
                        max_length=254,
                        verbose_name="email del responsable",
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("activa", "Activa"),
                            ("inactiva", "Inactiva"),
                            ("suspendida", "Suspendida"),
                            ("en_proceso", "En Proceso de Habilitación"),
                            ("cerrada", "Cerrada Permanentemente"),
                        ],
                        default="activa",
                        help_text="Estado actual de la sede.",
                        max_length=20,
                        verbose_name="estado",
                    ),
                ),
                (
                    "fecha_habilitacion",
                    models.DateField(
                        blank=True,
                        help_text="Fecha en que se habilitó la sede.",
                        null=True,
                        verbose_name="fecha de habilitación",
                    ),
                ),
                (
                    "fecha_renovacion",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de renovación de la habilitación.",
                        null=True,
                        verbose_name="fecha de renovación",
                    ),
                ),
                (
                    "numero_camas",
                    models.IntegerField(
                        default=0,
                        help_text="Número total de camas disponibles.",
                        verbose_name="número de camas",
                    ),
                ),
                (
                    "numero_consultorios",
                    models.IntegerField(
                        default=0,
                        help_text="Número total de consultorios disponibles.",
                        verbose_name="número de consultorios",
                    ),
                ),
                (
                    "numero_quirofanos",
                    models.IntegerField(
                        default=0,
                        help_text="Número total de quirófanos disponibles.",
                        verbose_name="número de quirófanos",
                    ),
                ),
                (
                    "horario_atencion",
                    models.JSONField(
                        default=dict,
                        help_text="Horarios de atención por día de la semana en formato JSON.",
                        verbose_name="horario de atención",
                    ),
                ),
                (
                    "atencion_24_horas",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si la sede ofrece atención las 24 horas.",
                        verbose_name="atención 24 horas",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones adicionales sobre la sede.",
                        verbose_name="observaciones",
                    ),
                ),
                (
                    "imported_from_file",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si la sede fue importada desde un archivo.",
                        verbose_name="importado desde archivo",
                    ),
                ),
                (
                    "import_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha y hora en que se importó la sede.",
                        null=True,
                        verbose_name="fecha de importación",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "health_organization",
                    models.ForeignKey(
                        help_text="Organización de salud a la que pertenece esta sede.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sedes",
                        to="organization.healthorganization",
                        verbose_name="Organización de Salud",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "sede prestadora",
                "verbose_name_plural": "sedes prestadoras",
                "ordering": ["numero_sede"],
            },
        ),
        migrations.CreateModel(
            name="SedeServicio",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "distintivo",
                    models.CharField(
                        help_text="Código distintivo del servicio en esta sede",
                        max_length=50,
                        verbose_name="código distintivo",
                    ),
                ),
                (
                    "capacidad_instalada",
                    models.IntegerField(
                        default=0,
                        help_text="Capacidad instalada para este servicio en la sede.",
                        verbose_name="capacidad instalada",
                    ),
                ),
                (
                    "fecha_habilitacion",
                    models.DateField(
                        blank=True,
                        help_text="Fecha en que se habilitó el servicio en esta sede.",
                        null=True,
                        verbose_name="fecha de habilitación del servicio",
                    ),
                ),
                (
                    "estado_servicio",
                    models.CharField(
                        choices=[
                            ("activo", "Activo"),
                            ("inactivo", "Inactivo"),
                            ("suspendido", "Suspendido"),
                        ],
                        default="activo",
                        help_text="Estado del servicio en esta sede.",
                        max_length=20,
                        verbose_name="estado del servicio",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones específicas del servicio en esta sede.",
                        verbose_name="observaciones",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "sede",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sede_servicios",
                        to="organization.sedeprestadora",
                        verbose_name="sede prestadora",
                    ),
                ),
                (
                    "servicio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="servicio_sedes",
                        to="organization.healthservice",
                        verbose_name="servicio de salud",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "servicio por sede",
                "verbose_name_plural": "servicios por sede",
                "ordering": ["sede", "servicio"],
            },
        ),
        migrations.AddField(
            model_name="sedeprestadora",
            name="servicios_habilitados",
            field=models.ManyToManyField(
                blank=True,
                related_name="sedes_prestadoras",
                through="organization.SedeServicio",
                to="organization.healthservice",
                verbose_name="servicios habilitados",
            ),
        ),
        migrations.AddIndex(
            model_name="sedeservicio",
            index=models.Index(
                fields=["sede", "estado_servicio"],
                name="organizatio_sede_id_b92dcc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="sedeservicio",
            index=models.Index(
                fields=["distintivo"], name="organizatio_distint_de82a6_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="sedeservicio",
            unique_together={("sede", "distintivo"), ("sede", "servicio")},
        ),
        migrations.AddIndex(
            model_name="sedeprestadora",
            index=models.Index(
                fields=["health_organization", "estado"],
                name="organizatio_health__01dcc8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="sedeprestadora",
            index=models.Index(
                fields=["departamento", "municipio"],
                name="organizatio_departa_20892f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="sedeprestadora",
            index=models.Index(
                fields=["codigo_prestador"], name="organizatio_codigo__14d9e7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sedeprestadora",
            index=models.Index(
                fields=["tipo_sede"], name="organizatio_tipo_se_bf9ce5_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="sedeprestadora",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("es_sede_principal", True), ("deleted_at__isnull", True)
                ),
                fields=("health_organization",),
                name="unique_main_sede_per_health_organization",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="sedeprestadora",
            unique_together={
                ("health_organization", "codigo_prestador"),
                ("health_organization", "numero_sede"),
            },
        ),
    ]
