# Generated by Django 5.0 on 2025-08-24 00:56

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("organization", "0015_add_capacity_models"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name="headquarterlocation",
            name="department_code",
            field=models.CharField(
                help_text="Código DIVIPOLA del departamento.",
                max_length=2,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Código de departamento debe tener 2 dígitos.",
                        regex="^\\d{2}$",
                    )
                ],
                verbose_name="código departamento",
            ),
        ),
        migrations.CreateModel(
            name="Area",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Código único del área (ej: DIR-MED, SUB-ADM)",
                        max_length=20,
                        verbose_name="código del área",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre completo del área",
                        max_length=200,
                        verbose_name="nombre del área",
                    ),
                ),
                (
                    "area_type",
                    models.CharField(
                        choices=[
                            ("DIRECTION", "Dirección"),
                            ("SUBDIRECTION", "Subdirección"),
                            ("DEPARTMENT", "Departamento"),
                            ("UNIT", "Unidad"),
                            ("SERVICE", "Servicio"),
                            ("SECTION", "Sección"),
                            ("OFFICE", "Oficina"),
                            ("COMMITTEE", "Comité"),
                            ("WORKGROUP", "Grupo de Trabajo"),
                        ],
                        help_text="Tipo de área organizacional",
                        max_length=20,
                        verbose_name="tipo de área",
                    ),
                ),
                (
                    "hierarchy_level",
                    models.IntegerField(
                        help_text="Nivel en la jerarquía organizacional",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="nivel jerárquico",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Descripción del propósito y funciones del área",
                        verbose_name="descripción",
                    ),
                ),
                (
                    "main_purpose",
                    models.TextField(
                        blank=True,
                        help_text="Propósito principal y misión del área",
                        verbose_name="propósito principal",
                    ),
                ),
                (
                    "requires_license",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el área requiere licencias específicas para operar",
                        verbose_name="requiere licencia específica",
                    ),
                ),
                (
                    "is_revenue_generating",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el área genera ingresos directos",
                        verbose_name="genera ingresos",
                    ),
                ),
                (
                    "physical_location",
                    models.CharField(
                        blank=True,
                        help_text="Ubicación física específica dentro de la sede",
                        max_length=200,
                        verbose_name="ubicación física",
                    ),
                ),
                (
                    "area_m2",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Área física en metros cuadrados",
                        max_digits=10,
                        null=True,
                        verbose_name="área en m²",
                    ),
                ),
                (
                    "capacity_persons",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Capacidad máxima de personas en el área",
                        null=True,
                        verbose_name="capacidad de personas",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "health_services",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Servicios de salud bajo responsabilidad del área",
                        related_name="responsible_areas",
                        to="organization.healthservice",
                    ),
                ),
                (
                    "parent_area",
                    models.ForeignKey(
                        blank=True,
                        help_text="Área superior en la jerarquía",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="child_areas",
                        to="organization.area",
                        verbose_name="área padre",
                    ),
                ),
                (
                    "sede",
                    models.ForeignKey(
                        blank=True,
                        help_text="Sede donde opera principalmente esta área",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="organizational_areas",
                        to="organization.location",
                        verbose_name="sede",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Área Organizacional",
                "verbose_name_plural": "Áreas Organizacionales",
                "db_table": "org_area",
                "ordering": ["hierarchy_level", "code"],
            },
        ),
        migrations.CreateModel(
            name="Cargo",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Código único del cargo (ej: GER-001, COORD-MED-001)",
                        max_length=30,
                        verbose_name="código del cargo",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre oficial del cargo",
                        max_length=200,
                        verbose_name="nombre del cargo",
                    ),
                ),
                (
                    "hierarchy_level",
                    models.CharField(
                        choices=[
                            ("BOARD", "Junta Directiva"),
                            ("EXECUTIVE", "Alta Dirección"),
                            ("SENIOR_MANAGEMENT", "Nivel Directivo"),
                            ("MIDDLE_MANAGEMENT", "Nivel Ejecutivo"),
                            ("PROFESSIONAL", "Nivel Profesional"),
                            ("TECHNICAL", "Nivel Técnico"),
                            ("AUXILIARY", "Nivel Auxiliar"),
                            ("OPERATIONAL", "Nivel Operativo"),
                        ],
                        help_text="Nivel jerárquico del cargo",
                        max_length=20,
                        verbose_name="nivel jerárquico",
                    ),
                ),
                (
                    "main_purpose",
                    models.TextField(
                        help_text="Propósito o misión principal del cargo",
                        verbose_name="propósito principal",
                    ),
                ),
                (
                    "requirements",
                    models.JSONField(
                        default=dict,
                        help_text="Requisitos del cargo:\n        {\n            'education': {\n                'level': 'university',\n                'title': 'Medicina',\n                'additional': 'Especialización preferible'\n            },\n            'experience': {\n                'years': 5,\n                'specific_area': 'Gestión hospitalaria',\n                'leadership_experience': true\n            },\n            'competencies': [\n                'Liderazgo',\n                'Trabajo en equipo',\n                'Comunicación efectiva'\n            ],\n            'licenses': [\n                'Tarjeta profesional médica',\n                'Registro de especialista'\n            ],\n            'languages': ['Español', 'Inglés básico'],\n            'technical_skills': [],\n            'others': []\n        }",
                    ),
                ),
                (
                    "is_critical",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si es un cargo crítico para la operación",
                        verbose_name="cargo crítico",
                    ),
                ),
                (
                    "is_process_owner",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si es responsable de algún proceso institucional",
                        verbose_name="dueño de proceso",
                    ),
                ),
                (
                    "is_service_leader",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si es líder de algún servicio específico",
                        verbose_name="líder de servicio",
                    ),
                ),
                (
                    "requires_professional_license",
                    models.BooleanField(
                        default=False,
                        help_text="Requiere tarjeta o licencia profesional para ejercer",
                        verbose_name="requiere tarjeta profesional",
                    ),
                ),
                (
                    "requires_sst_license",
                    models.BooleanField(
                        default=False,
                        help_text="Requiere licencia en Seguridad y Salud en el Trabajo",
                        verbose_name="requiere licencia SST",
                    ),
                ),
                (
                    "authorized_positions",
                    models.IntegerField(
                        default=1,
                        help_text="Número de plazas autorizadas para este cargo",
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="plazas autorizadas",
                    ),
                ),
                (
                    "salary_range_min",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Rango salarial mínimo para el cargo",
                        max_digits=12,
                        null=True,
                        verbose_name="salario mínimo",
                    ),
                ),
                (
                    "salary_range_max",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Rango salarial máximo para el cargo",
                        max_digits=12,
                        null=True,
                        verbose_name="salario máximo",
                    ),
                ),
                (
                    "position_type",
                    models.CharField(
                        blank=True,
                        help_text="Tipo específico para validaciones sectoriales",
                        max_length=50,
                        verbose_name="tipo de cargo",
                    ),
                ),
                (
                    "area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="positions",
                        to="organization.area",
                        verbose_name="área",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "health_services",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Servicios de salud bajo responsabilidad del cargo",
                        related_name="responsible_positions",
                        to="organization.healthservice",
                    ),
                ),
                (
                    "reports_to",
                    models.ForeignKey(
                        blank=True,
                        help_text="Cargo al cual reporta directamente",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="subordinates",
                        to="organization.cargo",
                        verbose_name="reporta a",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cargo",
                "verbose_name_plural": "Cargos",
                "db_table": "org_position",
                "ordering": ["area__hierarchy_level", "code"],
            },
        ),
        migrations.AddField(
            model_name="area",
            name="area_manager",
            field=models.ForeignKey(
                blank=True,
                help_text="Cargo responsable de la gestión del área",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="managed_areas",
                to="organization.cargo",
                verbose_name="responsable del área",
            ),
        ),
        migrations.CreateModel(
            name="Comite",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Código único del comité (ej: COM-CAL, COM-SEG-PAC)",
                        max_length=30,
                        verbose_name="código del comité",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre completo del comité",
                        max_length=200,
                        verbose_name="nombre del comité",
                    ),
                ),
                (
                    "committee_type",
                    models.CharField(
                        choices=[
                            ("MANDATORY", "Obligatorio por Normativa"),
                            ("VOLUNTARY", "Voluntario"),
                            ("SECTORAL", "Requerido por Sector"),
                            ("TEMPORARY", "Temporal"),
                            ("AD_HOC", "Ad Hoc"),
                        ],
                        help_text="Clasificación del tipo de comité",
                        max_length=20,
                        verbose_name="tipo de comité",
                    ),
                ),
                (
                    "normative_requirement",
                    models.CharField(
                        blank=True,
                        help_text="Normativa específica que exige este comité",
                        max_length=200,
                        verbose_name="normativa que lo exige",
                    ),
                ),
                (
                    "sector_specific",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si es específico para el sector de la organización",
                        verbose_name="específico del sector",
                    ),
                ),
                (
                    "meeting_frequency",
                    models.CharField(
                        choices=[
                            ("WEEKLY", "Semanal"),
                            ("BIWEEKLY", "Quincenal"),
                            ("MONTHLY", "Mensual"),
                            ("BIMONTHLY", "Bimestral"),
                            ("QUARTERLY", "Trimestral"),
                            ("SEMIANNUAL", "Semestral"),
                            ("ANNUAL", "Anual"),
                            ("AS_NEEDED", "Según necesidad"),
                            ("EXTRAORDINARY", "Extraordinaria"),
                        ],
                        help_text="Frecuencia de reuniones ordinarias",
                        max_length=20,
                        verbose_name="frecuencia de reuniones",
                    ),
                ),
                (
                    "minimum_quorum",
                    models.IntegerField(
                        help_text="Número mínimo de miembros para sesionar",
                        validators=[
                            django.core.validators.MinValueValidator(2),
                            django.core.validators.MaxValueValidator(50),
                        ],
                        verbose_name="quórum mínimo",
                    ),
                ),
                (
                    "functions",
                    models.JSONField(
                        default=list,
                        help_text='Lista de funciones del comité:\n        [\n            "Evaluar el cumplimiento de políticas de calidad",\n            "Proponer mejoras en procesos asistenciales",\n            "Revisar indicadores de gestión"\n        ]',
                    ),
                ),
                (
                    "decision_powers",
                    models.JSONField(
                        default=list,
                        help_text='Tipos de decisiones que puede tomar:\n        [\n            "Aprobar protocolos",\n            "Recomendar acciones correctivas",\n            "Evaluar casos específicos"\n        ]',
                    ),
                ),
                (
                    "generates_minutes",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si debe generar actas de reunión",
                        verbose_name="genera actas",
                    ),
                ),
                (
                    "reports_to_board",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si reporta directamente a junta directiva",
                        verbose_name="reporta a junta directiva",
                    ),
                ),
                (
                    "has_decision_authority",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si puede tomar decisiones vinculantes",
                        verbose_name="tiene autoridad de decisión",
                    ),
                ),
                (
                    "usual_meeting_location",
                    models.CharField(
                        blank=True,
                        help_text="Ubicación típica para las reuniones",
                        max_length=200,
                        verbose_name="lugar habitual de reunión",
                    ),
                ),
                (
                    "usual_meeting_time",
                    models.TimeField(
                        blank=True,
                        help_text="Hora típica para las reuniones",
                        null=True,
                        verbose_name="hora habitual de reunión",
                    ),
                ),
                (
                    "meeting_duration_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Duración típica de las reuniones en horas",
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.5),
                            django.core.validators.MaxValueValidator(12.0),
                        ],
                        verbose_name="duración típica (horas)",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de inicio para comités temporales",
                        null=True,
                        verbose_name="fecha de inicio",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de finalización para comités temporales",
                        null=True,
                        verbose_name="fecha de finalización",
                    ),
                ),
                (
                    "chairperson",
                    models.ForeignKey(
                        help_text="Cargo que preside el comité",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="committees_chaired",
                        to="organization.cargo",
                        verbose_name="presidente",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "scope_areas",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Áreas organizacionales bajo el alcance del comité",
                        related_name="oversight_committees",
                        to="organization.area",
                        verbose_name="áreas bajo su alcance",
                    ),
                ),
                (
                    "secretary",
                    models.ForeignKey(
                        help_text="Cargo que ejerce como secretario del comité",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="committees_as_secretary",
                        to="organization.cargo",
                        verbose_name="secretario",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Comité Institucional",
                "verbose_name_plural": "Comités Institucionales",
                "db_table": "org_committee",
                "ordering": ["committee_type", "code"],
            },
        ),
        migrations.CreateModel(
            name="Autoridad",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Descripción detallada de la autoridad conferida",
                        verbose_name="descripción de la autoridad",
                    ),
                ),
                (
                    "decision_type",
                    models.CharField(
                        choices=[
                            ("FINANCIAL", "Decisión Financiera"),
                            ("OPERATIONAL", "Decisión Operativa"),
                            ("PERSONNEL", "Decisión de Personal"),
                            ("CLINICAL", "Decisión Clínica"),
                            ("ADMINISTRATIVE", "Decisión Administrativa"),
                            ("STRATEGIC", "Decisión Estratégica"),
                            ("PROCUREMENT", "Decisión de Compras"),
                            ("LEGAL", "Decisión Legal"),
                        ],
                        help_text="Tipo de decisión que puede tomar",
                        max_length=20,
                        verbose_name="tipo de decisión",
                    ),
                ),
                (
                    "financial_limit",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Límite monetario de aprobación (si aplica)",
                        max_digits=15,
                        null=True,
                        verbose_name="límite de aprobación financiera",
                    ),
                ),
                (
                    "requires_superior_validation",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si requiere aprobación del superior jerárquico",
                        verbose_name="requiere validación del superior",
                    ),
                ),
                (
                    "requires_committee_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si requiere aprobación de comité específico",
                        verbose_name="requiere aprobación de comité",
                    ),
                ),
                (
                    "scope",
                    models.TextField(
                        blank=True,
                        help_text="Descripción específica del alcance y limitaciones",
                        verbose_name="alcance de la autoridad",
                    ),
                ),
                (
                    "can_delegate",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si esta autoridad puede ser delegada",
                        verbose_name="puede delegar",
                    ),
                ),
                (
                    "delegation_conditions",
                    models.TextField(
                        blank=True,
                        help_text="Condiciones bajo las cuales se puede delegar",
                        verbose_name="condiciones de delegación",
                    ),
                ),
                (
                    "is_temporary",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si es una autoridad temporal",
                        verbose_name="autoridad temporal",
                    ),
                ),
                (
                    "valid_from",
                    models.DateField(
                        blank=True,
                        help_text="Fecha desde la cual es válida la autoridad",
                        null=True,
                        verbose_name="válida desde",
                    ),
                ),
                (
                    "valid_until",
                    models.DateField(
                        blank=True,
                        help_text="Fecha hasta la cual es válida la autoridad",
                        null=True,
                        verbose_name="válida hasta",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authorities",
                        to="organization.cargo",
                        verbose_name="cargo",
                    ),
                ),
                (
                    "approving_committee",
                    models.ForeignKey(
                        blank=True,
                        help_text="Comité que debe aprobar estas decisiones",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="authorities_requiring_approval",
                        to="organization.comite",
                        verbose_name="comité aprobador",
                    ),
                ),
            ],
            options={
                "verbose_name": "Autoridad",
                "verbose_name_plural": "Autoridades",
                "db_table": "org_authority",
                "ordering": ["position", "decision_type"],
            },
        ),
        migrations.CreateModel(
            name="CommitteeMeeting",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "meeting_number",
                    models.IntegerField(
                        help_text="Número consecutivo de la reunión",
                        verbose_name="número de reunión",
                    ),
                ),
                (
                    "meeting_type",
                    models.CharField(
                        choices=[
                            ("ORDINARY", "Ordinaria"),
                            ("EXTRAORDINARY", "Extraordinaria"),
                            ("EMERGENCY", "Emergencia"),
                            ("SPECIAL", "Especial"),
                        ],
                        default="ORDINARY",
                        max_length=20,
                        verbose_name="tipo de reunión",
                    ),
                ),
                (
                    "meeting_date",
                    models.DateField(
                        help_text="Fecha programada para la reunión",
                        verbose_name="fecha de reunión",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        help_text="Hora de inicio de la reunión",
                        verbose_name="hora de inicio",
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        blank=True,
                        help_text="Hora de finalización de la reunión",
                        null=True,
                        verbose_name="hora de finalización",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        help_text="Lugar donde se realizó la reunión",
                        max_length=200,
                        verbose_name="ubicación",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("SCHEDULED", "Programada"),
                            ("IN_PROGRESS", "En Curso"),
                            ("COMPLETED", "Completada"),
                            ("CANCELLED", "Cancelada"),
                            ("POSTPONED", "Pospuesta"),
                        ],
                        default="SCHEDULED",
                        max_length=20,
                        verbose_name="estado",
                    ),
                ),
                (
                    "quorum_achieved",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si se logró el quórum para la reunión",
                        verbose_name="quórum alcanzado",
                    ),
                ),
                (
                    "agenda",
                    models.TextField(
                        blank=True,
                        help_text="Agenda de temas a tratar en la reunión",
                        verbose_name="agenda",
                    ),
                ),
                (
                    "minutes",
                    models.TextField(
                        blank=True,
                        help_text="Acta detallada de la reunión",
                        verbose_name="acta de reunión",
                    ),
                ),
                (
                    "decisions_made",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text='Decisiones tomadas en la reunión:\n        [\n            {\n                "decision": "Aprobar nuevo protocolo",\n                "vote_result": "unanimous",\n                "implementation_date": "2024-03-01"\n            }\n        ]',
                    ),
                ),
                (
                    "action_items",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text='Tareas y compromisos asignados:\n        [\n            {\n                "task": "Revisar protocolo",\n                "assigned_to": "Director Médico",\n                "due_date": "2024-02-15",\n                "status": "pending"\n            }\n        ]',
                    ),
                ),
                (
                    "supporting_documents",
                    models.FileField(
                        blank=True,
                        help_text="Documentos presentados en la reunión",
                        null=True,
                        upload_to="committees/meetings/%Y/%m/",
                        verbose_name="documentos de apoyo",
                    ),
                ),
                (
                    "signed_minutes",
                    models.FileField(
                        blank=True,
                        help_text="Acta firmada por el presidente y secretario",
                        null=True,
                        upload_to="committees/signed_minutes/%Y/%m/",
                        verbose_name="acta firmada",
                    ),
                ),
                (
                    "committee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="meetings",
                        to="organization.comite",
                        verbose_name="comité",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reunión de Comité",
                "verbose_name_plural": "Reuniones de Comité",
                "db_table": "org_committee_meeting",
                "ordering": ["-meeting_date", "-meeting_number"],
            },
        ),
        migrations.CreateModel(
            name="MiembroComite",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "participation_type",
                    models.CharField(
                        choices=[
                            ("PERMANENT", "Miembro Permanente"),
                            ("INVITED", "Invitado"),
                            ("ADVISOR", "Asesor"),
                            ("OBSERVER", "Observador"),
                            ("SUBSTITUTE", "Suplente"),
                            ("EX_OFFICIO", "Miembro Ex Officio"),
                        ],
                        default="PERMANENT",
                        help_text="Tipo de participación en el comité",
                        max_length=20,
                        verbose_name="tipo de participación",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Fecha de vinculación al comité",
                        verbose_name="fecha de vinculación",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de desvinculación del comité",
                        null=True,
                        verbose_name="fecha de desvinculación",
                    ),
                ),
                (
                    "has_voting_rights",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si tiene derecho a voto en decisiones",
                        verbose_name="tiene derecho a voto",
                    ),
                ),
                (
                    "can_convene_meetings",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si puede convocar reuniones del comité",
                        verbose_name="puede convocar reuniones",
                    ),
                ),
                (
                    "committee_role",
                    models.CharField(
                        blank=True,
                        help_text="Rol específico dentro del comité (ej: Coordinador de subcomisión)",
                        max_length=100,
                        verbose_name="rol en el comité",
                    ),
                ),
                (
                    "areas_of_expertise",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text='Áreas de expertise que aporta al comité:\n        ["Gestión clínica", "Sistemas de información", "Auditoría médica"]',
                    ),
                ),
                (
                    "appointment_document",
                    models.FileField(
                        blank=True,
                        help_text="Documento oficial de nombramiento",
                        null=True,
                        upload_to="committees/appointments/%Y/%m/",
                        verbose_name="documento de nombramiento",
                    ),
                ),
                (
                    "meetings_attended",
                    models.IntegerField(
                        default=0,
                        help_text="Número de reuniones a las que ha asistido",
                        verbose_name="reuniones asistidas",
                    ),
                ),
                (
                    "meetings_missed",
                    models.IntegerField(
                        default=0,
                        help_text="Número de reuniones perdidas",
                        verbose_name="reuniones no asistidas",
                    ),
                ),
                (
                    "last_attendance_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de la última reunión a la que asistió",
                        null=True,
                        verbose_name="última asistencia",
                    ),
                ),
                (
                    "appointed_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Usuario que realizó el nombramiento",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="committee_appointments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="nombrado por",
                    ),
                ),
                (
                    "committee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="organization.comite",
                        verbose_name="comité",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "is_substitute_for",
                    models.ForeignKey(
                        blank=True,
                        help_text="Miembro al cual suple cuando sea necesario",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitutes",
                        to="organization.miembrocomite",
                        verbose_name="suplente de",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="committee_memberships",
                        to="organization.cargo",
                        verbose_name="cargo",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Miembro de Comité",
                "verbose_name_plural": "Miembros de Comité",
                "db_table": "org_committee_member",
                "ordering": ["committee", "participation_type", "start_date"],
            },
        ),
        migrations.CreateModel(
            name="MeetingAttendance",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "attendance_status",
                    models.CharField(
                        choices=[
                            ("PRESENT", "Presente"),
                            ("ABSENT", "Ausente"),
                            ("EXCUSED", "Excusado"),
                            ("LATE", "Llegada tardía"),
                            ("LEFT_EARLY", "Salida temprana"),
                        ],
                        default="PRESENT",
                        max_length=20,
                    ),
                ),
                ("arrival_time", models.TimeField(blank=True, null=True)),
                ("departure_time", models.TimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "meeting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_records",
                        to="organization.committeemeeting",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_records",
                        to="organization.miembrocomite",
                    ),
                ),
            ],
            options={
                "db_table": "org_meeting_attendance",
            },
        ),
        migrations.AddField(
            model_name="committeemeeting",
            name="attendees",
            field=models.ManyToManyField(
                related_name="attended_meetings",
                through="organization.MeetingAttendance",
                to="organization.miembrocomite",
                verbose_name="asistentes",
            ),
        ),
        migrations.CreateModel(
            name="OrganizationalChart",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "organization_type",
                    models.CharField(
                        help_text="Tipo específico dentro del sector (ej: IPS, Universidad, Fábrica)",
                        max_length=50,
                        verbose_name="tipo específico de organización",
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        help_text="Versión del organigrama (ej: 1.0, 2.1)",
                        max_length=10,
                        verbose_name="versión",
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        help_text="Fecha desde la cual este organigrama está vigente",
                        verbose_name="fecha de vigencia",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha hasta la cual estuvo vigente (null = vigente actual)",
                        null=True,
                        verbose_name="fecha de fin de vigencia",
                    ),
                ),
                (
                    "is_current",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si este es el organigrama vigente actual",
                    ),
                ),
                (
                    "approval_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="fecha de aprobación"
                    ),
                ),
                (
                    "approval_document",
                    models.FileField(
                        blank=True,
                        help_text="Acta o resolución de aprobación",
                        null=True,
                        upload_to="orgcharts/approvals/%Y/%m/",
                        verbose_name="documento de aprobación",
                    ),
                ),
                (
                    "hierarchy_levels",
                    models.IntegerField(
                        default=5,
                        help_text="Número de niveles jerárquicos en la estructura",
                        validators=[
                            django.core.validators.MinValueValidator(3),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="niveles jerárquicos",
                    ),
                ),
                (
                    "allows_temporary_positions",
                    models.BooleanField(
                        default=True,
                        help_text="Permite definir cargos temporales o encargos",
                        verbose_name="permite cargos temporales",
                    ),
                ),
                (
                    "uses_raci_matrix",
                    models.BooleanField(
                        default=True,
                        help_text="Utiliza matriz RACI para responsabilidades de procesos",
                        verbose_name="utiliza matriz RACI",
                    ),
                ),
                (
                    "sector_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuración específica por sector:\n        {\n            'validations_active': [],      # Validaciones activas del sector\n            'additional_committees': [],   # Comités adicionales a los obligatorios\n            'special_positions': [],       # Cargos específicos del sector\n            'applied_standards': [],       # Normativas que cumple\n            'customizations': {}           # Configuración específica\n        }",
                    ),
                ),
                (
                    "last_validation_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de la última validación de cumplimiento",
                        null=True,
                        verbose_name="última validación",
                    ),
                ),
                (
                    "compliance_status",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Estado del cumplimiento normativo",
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="approved_org_charts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="aprobado por",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "organization",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="organizational_chart",
                        to="organization.organization",
                        verbose_name="organización",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organigrama",
                "verbose_name_plural": "Organigramas",
                "db_table": "org_chart",
                "ordering": ["-effective_date", "-version"],
            },
        ),
        migrations.AddField(
            model_name="comite",
            name="organizational_chart",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="committees",
                to="organization.organizationalchart",
                verbose_name="organigrama",
            ),
        ),
        migrations.AddField(
            model_name="area",
            name="organizational_chart",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="areas",
                to="organization.organizationalchart",
                verbose_name="organigrama",
            ),
        ),
        migrations.CreateModel(
            name="PlantillaOrganigrama",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "organization_type",
                    models.CharField(
                        help_text="Tipo específico dentro del sector (ej: IPS, Hospital, Clínica)",
                        max_length=50,
                        verbose_name="tipo de organización",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre descriptivo de la plantilla",
                        max_length=200,
                        verbose_name="nombre de la plantilla",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Descripción detallada de la plantilla y su aplicación",
                        verbose_name="descripción",
                    ),
                ),
                (
                    "complexity",
                    models.CharField(
                        choices=[
                            ("BASIC", "Básica"),
                            ("MEDIUM", "Media"),
                            ("HIGH", "Alta"),
                        ],
                        default="MEDIUM",
                        help_text="Nivel de complejidad de la estructura organizacional",
                        max_length=20,
                        verbose_name="nivel de complejidad",
                    ),
                ),
                (
                    "structure",
                    models.JSONField(
                        help_text="Estructura organizacional predefinida:\n        {\n            'areas': [\n                {\n                    'code': 'DIR-GEN',\n                    'name': 'Dirección General',\n                    'type': 'DIRECTION',\n                    'level': 1\n                }\n            ],\n            'positions': [\n                {\n                    'code': 'DIR-001',\n                    'name': 'Director General',\n                    'area_code': 'DIR-GEN',\n                    'level': 'EXECUTIVE',\n                    'is_critical': true\n                }\n            ],\n            'committees': [\n                {\n                    'code': 'COM-CAL',\n                    'name': 'Comité de Calidad',\n                    'type': 'MANDATORY'\n                }\n            ],\n            'hierarchy_levels': 5\n        }"
                    ),
                ),
                (
                    "times_used",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Número de veces que se ha utilizado esta plantilla",
                        verbose_name="veces utilizada",
                    ),
                ),
                (
                    "last_used_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha y hora de la última utilización",
                        null=True,
                        verbose_name="última utilización",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Plantilla de Organigrama",
                "verbose_name_plural": "Plantillas de Organigrama",
                "db_table": "org_chart_template",
                "ordering": ["sector", "organization_type", "complexity"],
            },
        ),
        migrations.AddField(
            model_name="organizationalchart",
            name="base_template",
            field=models.ForeignKey(
                blank=True,
                help_text="Plantilla utilizada como base para este organigrama",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="charts_created",
                to="organization.plantillaorganigrama",
                verbose_name="plantilla base",
            ),
        ),
        migrations.CreateModel(
            name="Responsabilidad",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Descripción detallada de la responsabilidad",
                        verbose_name="descripción",
                    ),
                ),
                (
                    "responsibility_type",
                    models.CharField(
                        choices=[
                            ("NORMATIVE", "Normativa/Legal"),
                            ("OPERATIONAL", "Operativa"),
                            ("ADMINISTRATIVE", "Administrativa"),
                            ("QUALITY", "Calidad"),
                            ("SAFETY", "Seguridad del Paciente"),
                            ("FINANCIAL", "Financiera"),
                            ("HUMAN_RESOURCES", "Talento Humano"),
                            ("TECHNOLOGICAL", "Tecnológica"),
                            ("ENVIRONMENTAL", "Ambiental"),
                            ("STRATEGIC", "Estratégica"),
                        ],
                        help_text="Clasificación del tipo de responsabilidad",
                        max_length=20,
                        verbose_name="tipo de responsabilidad",
                    ),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("DAILY", "Diaria"),
                            ("WEEKLY", "Semanal"),
                            ("BIWEEKLY", "Quincenal"),
                            ("MONTHLY", "Mensual"),
                            ("QUARTERLY", "Trimestral"),
                            ("SEMIANNUAL", "Semestral"),
                            ("ANNUAL", "Anual"),
                            ("OCCASIONAL", "Ocasional"),
                            ("PERMANENT", "Permanente"),
                        ],
                        help_text="Frecuencia de ejecución de la responsabilidad",
                        max_length=20,
                        verbose_name="frecuencia",
                    ),
                ),
                (
                    "is_normative_requirement",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si es requerida por normativa específica",
                        verbose_name="es requisito normativo",
                    ),
                ),
                (
                    "normative_reference",
                    models.CharField(
                        blank=True,
                        help_text="Normativa que exige esta responsabilidad",
                        max_length=200,
                        verbose_name="referencia normativa",
                    ),
                ),
                (
                    "performance_indicator",
                    models.CharField(
                        blank=True,
                        help_text="Indicador para medir cumplimiento de la responsabilidad",
                        max_length=200,
                        verbose_name="indicador asociado",
                    ),
                ),
                (
                    "raci_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("RESPONSIBLE", "Responsable (R)"),
                            ("ACCOUNTABLE", "Aprobador (A)"),
                            ("CONSULTED", "Consultado (C)"),
                            ("INFORMED", "Informado (I)"),
                        ],
                        help_text="Rol en la matriz RACI para esta responsabilidad",
                        max_length=20,
                        verbose_name="rol RACI",
                    ),
                ),
                (
                    "priority_level",
                    models.CharField(
                        choices=[
                            ("LOW", "Baja"),
                            ("MEDIUM", "Media"),
                            ("HIGH", "Alta"),
                            ("CRITICAL", "Crítica"),
                        ],
                        default="MEDIUM",
                        help_text="Nivel de prioridad de la responsabilidad",
                        max_length=10,
                        verbose_name="nivel de prioridad",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="responsibilities",
                        to="organization.cargo",
                        verbose_name="cargo",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Responsabilidad",
                "verbose_name_plural": "Responsabilidades",
                "db_table": "org_responsibility",
                "ordering": ["position", "responsibility_type", "priority_level"],
            },
        ),
        migrations.CreateModel(
            name="Sector",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        choices=[
                            ("HEALTH", "Sector Salud"),
                            ("EDUCATION", "Sector Educación"),
                            ("MANUFACTURING", "Sector Manufactura"),
                            ("SERVICES", "Sector Servicios"),
                            ("PUBLIC", "Sector Público"),
                            ("OTHER", "Otro Sector"),
                        ],
                        help_text="Código único del sector",
                        max_length=20,
                        unique=True,
                        verbose_name="código del sector",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre completo del sector",
                        max_length=100,
                        verbose_name="nombre del sector",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Descripción detallada del sector y sus características",
                        verbose_name="descripción",
                    ),
                ),
                (
                    "default_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Configuración por defecto del sector:\n        {\n            'hierarchy_levels_default': 5,\n            'requires_mandatory_committees': true,\n            'normative_validations': [],\n            'mandatory_positions': [],\n            'mandatory_committees': [],\n            'applicable_standards': []\n        }",
                    ),
                ),
                (
                    "normative_requirements",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de requisitos normativos específicos del sector",
                    ),
                ),
                (
                    "has_templates",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si el sector tiene plantillas predefinidas",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sector",
                "verbose_name_plural": "Sectores",
                "db_table": "org_sector",
                "ordering": ["code"],
            },
        ),
        migrations.AddField(
            model_name="plantillaorganigrama",
            name="sector",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="org_chart_templates",
                to="organization.sector",
                verbose_name="sector",
            ),
        ),
        migrations.AddField(
            model_name="organizationalchart",
            name="sector",
            field=models.ForeignKey(
                help_text="Sector de la organización para validaciones especializadas",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="organizational_charts",
                to="organization.sector",
                verbose_name="sector",
            ),
        ),
        migrations.CreateModel(
            name="SectorNormativa",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Código único de la normativa (ej: RES-2003-2014)",
                        max_length=50,
                        verbose_name="código de la normativa",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre completo de la normativa",
                        max_length=200,
                        verbose_name="nombre de la normativa",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Descripción detallada de la normativa y su aplicación",
                        verbose_name="descripción",
                    ),
                ),
                (
                    "normative_type",
                    models.CharField(
                        choices=[
                            ("LAW", "Ley"),
                            ("DECREE", "Decreto"),
                            ("RESOLUTION", "Resolución"),
                            ("CIRCULAR", "Circular"),
                            ("ISO_STANDARD", "Norma ISO"),
                            ("STANDARD", "Estándar"),
                            ("OTHER", "Otro"),
                        ],
                        help_text="Tipo de normativa",
                        max_length=30,
                        verbose_name="tipo de normativa",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Indica si la normativa es obligatoria para el sector",
                    ),
                ),
                (
                    "is_current",
                    models.BooleanField(
                        default=True, help_text="Indica si la normativa está vigente"
                    ),
                ),
                (
                    "requirements",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de requisitos específicos de esta normativa",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "sector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="normativas",
                        to="organization.sector",
                        verbose_name="sector",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Normativa del Sector",
                "verbose_name_plural": "Normativas del Sector",
                "db_table": "org_sector_normativa",
                "ordering": ["sector", "normative_type", "name"],
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Código único del servicio dentro del sector",
                        max_length=50,
                        verbose_name="código del servicio",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nombre completo del servicio",
                        max_length=200,
                        verbose_name="nombre del servicio",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("CORE", "Servicio Principal"),
                            ("SUPPORT", "Servicio de Apoyo"),
                            ("ADMINISTRATIVE", "Servicio Administrativo"),
                            ("SPECIALIZED", "Servicio Especializado"),
                            ("REGULATORY", "Servicio Regulatorio"),
                            ("QUALITY", "Servicio de Calidad"),
                        ],
                        default="CORE",
                        help_text="Clasificación del tipo de servicio",
                        max_length=20,
                        verbose_name="categoría del servicio",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Descripción detallada del servicio y su propósito",
                        verbose_name="descripción",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si este servicio es obligatorio para organizaciones del sector",
                        verbose_name="es obligatorio",
                    ),
                ),
                (
                    "required_positions",
                    models.JSONField(
                        default=list,
                        help_text='Cargos requeridos para el servicio:\n        [\n            {\n                "position_type": "SERVICE_CHIEF",\n                "name": "Jefe del Servicio",\n                "is_critical": true,\n                "min_quantity": 1,\n                "required_qualifications": ["Título profesional", "Experiencia 3 años"]\n            },\n            {\n                "position_type": "SPECIALIST",\n                "name": "Especialista",\n                "is_critical": false,\n                "min_quantity": 2,\n                "required_qualifications": ["Especialización"]\n            }\n        ]',
                    ),
                ),
                (
                    "regulatory_requirements",
                    models.JSONField(
                        default=dict,
                        help_text='Requisitos regulatorios del servicio:\n        {\n            "standards": ["ISO_9001", "SECTOR_SPECIFIC"],\n            "licenses": ["LICENSE_TYPE_1"],\n            "certifications": ["CERT_1", "CERT_2"],\n            "inspections": ["ANNUAL_INSPECTION"],\n            "reporting": ["MONTHLY_REPORT"]\n        }',
                    ),
                ),
                (
                    "performance_indicators",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text='Indicadores de desempeño del servicio:\n        [\n            {\n                "name": "Tiempo promedio de atención",\n                "target": "< 30 minutos",\n                "measurement": "monthly_average"\n            }\n        ]',
                    ),
                ),
                (
                    "minimum_operating_hours",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Horas mínimas de operación por día",
                        max_digits=4,
                        null=True,
                        verbose_name="horas mínimas de operación",
                    ),
                ),
                (
                    "requires_24_7_coverage",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si requiere cobertura las 24 horas",
                        verbose_name="requiere cobertura 24/7",
                    ),
                ),
                (
                    "minimum_space_m2",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Espacio físico mínimo requerido en metros cuadrados",
                        max_digits=8,
                        null=True,
                        verbose_name="espacio mínimo (m²)",
                    ),
                ),
                (
                    "required_equipment",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text='Equipos requeridos para el servicio:\n        ["Computador", "Impresora", "Equipo especializado X"]',
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "parent_service",
                    models.ForeignKey(
                        blank=True,
                        help_text="Servicio padre en la jerarquía (si aplica)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sub_services",
                        to="organization.service",
                        verbose_name="servicio padre",
                    ),
                ),
                (
                    "sector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="services",
                        to="organization.sector",
                        verbose_name="sector",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Servicio",
                "verbose_name_plural": "Servicios",
                "db_table": "org_service",
                "ordering": ["sector", "category", "name"],
            },
        ),
        migrations.AddField(
            model_name="cargo",
            name="managed_services",
            field=models.ManyToManyField(
                blank=True,
                help_text="Servicios bajo responsabilidad del cargo",
                related_name="responsible_positions",
                to="organization.service",
            ),
        ),
        migrations.CreateModel(
            name="ServiceAreaAssignment",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "assignment_type",
                    models.CharField(
                        choices=[
                            ("PRIMARY", "Responsabilidad Primaria"),
                            ("SECONDARY", "Responsabilidad Secundaria"),
                            ("SUPPORT", "Apoyo"),
                            ("COORDINATION", "Coordinación"),
                        ],
                        default="PRIMARY",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateField(default=django.utils.timezone.now)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "area",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organization.area",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organization.service",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "db_table": "org_service_area_assignment",
            },
        ),
        migrations.AddField(
            model_name="area",
            name="managed_services",
            field=models.ManyToManyField(
                blank=True,
                help_text="Servicios genéricos administrados por el área",
                related_name="responsible_areas",
                through="organization.ServiceAreaAssignment",
                to="organization.service",
            ),
        ),
        migrations.CreateModel(
            name="ServiceIntegration",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Fecha de inicio de operación del servicio",
                        verbose_name="fecha de inicio",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de finalización del servicio (null = activo)",
                        null=True,
                        verbose_name="fecha de finalización",
                    ),
                ),
                (
                    "service_config",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text='Configuración específica del servicio para esta organización:\n        {\n            "operating_hours": "08:00-17:00",\n            "capacity": 50,\n            "special_requirements": [],\n            "customizations": {}\n        }',
                    ),
                ),
                (
                    "compliance_status",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Estado de cumplimiento de requisitos del servicio",
                    ),
                ),
                (
                    "last_compliance_check",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de la última verificación de cumplimiento",
                        null=True,
                        verbose_name="última verificación de cumplimiento",
                    ),
                ),
                (
                    "performance_metrics",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Métricas de desempeño del servicio",
                    ),
                ),
                (
                    "operational_status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Activo"),
                            ("INACTIVE", "Inactivo"),
                            ("SUSPENDED", "Suspendido"),
                            ("MAINTENANCE", "En mantenimiento"),
                            ("PLANNING", "En planeación"),
                        ],
                        default="ACTIVE",
                        help_text="Estado operacional actual del servicio",
                        max_length=20,
                        verbose_name="estado operacional",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "health_service",
                    models.ForeignKey(
                        blank=True,
                        help_text="Vinculación con servicio de salud específico (si aplica)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="generic_service_integrations",
                        to="organization.healthservice",
                        verbose_name="servicio de salud",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_integrations",
                        to="organization.organization",
                        verbose_name="organización",
                    ),
                ),
                (
                    "responsible_area",
                    models.ForeignKey(
                        blank=True,
                        help_text="Área organizacional responsable del servicio",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_service_integrations",
                        to="organization.area",
                        verbose_name="área responsable",
                    ),
                ),
                (
                    "responsible_position",
                    models.ForeignKey(
                        blank=True,
                        help_text="Cargo específico responsable del servicio",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_service_integrations",
                        to="organization.cargo",
                        verbose_name="cargo responsable",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="integrations",
                        to="organization.service",
                        verbose_name="servicio",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Integración de Servicio",
                "verbose_name_plural": "Integraciones de Servicio",
                "db_table": "org_service_integration",
                "ordering": ["organization", "service"],
            },
        ),
        migrations.CreateModel(
            name="AsignacionCargo",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "assignment_type",
                    models.CharField(
                        choices=[
                            ("TITULAR", "Titular"),
                            ("TEMPORARY", "Temporal"),
                            ("SUBSTITUTE", "Encargo"),
                            ("ACTING", "Interino"),
                            ("CONSULTANT", "Consultor"),
                            ("CONTRACTOR", "Contratista"),
                            ("VOLUNTEER", "Voluntario"),
                        ],
                        default="TITULAR",
                        help_text="Tipo de asignación al cargo",
                        max_length=20,
                        verbose_name="tipo de asignación",
                    ),
                ),
                (
                    "assignment_status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Activa"),
                            ("SUSPENDED", "Suspendida"),
                            ("TERMINATED", "Terminada"),
                            ("ON_LEAVE", "En licencia"),
                            ("TRANSFERRED", "Trasladada"),
                        ],
                        default="ACTIVE",
                        help_text="Estado actual de la asignación",
                        max_length=20,
                        verbose_name="estado de la asignación",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Fecha de inicio en el cargo",
                        verbose_name="fecha de inicio",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de finalización en el cargo (null = activa)",
                        null=True,
                        verbose_name="fecha de finalización",
                    ),
                ),
                (
                    "planned_end_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha prevista de finalización para asignaciones temporales",
                        null=True,
                        verbose_name="fecha prevista de finalización",
                    ),
                ),
                (
                    "assignment_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=100.0,
                        help_text="Porcentaje de tiempo dedicado al cargo",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0.01),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                        verbose_name="porcentaje de dedicación",
                    ),
                ),
                (
                    "salary",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Salario asignado para esta posición",
                        max_digits=12,
                        null=True,
                        verbose_name="salario",
                    ),
                ),
                (
                    "appointment_document",
                    models.FileField(
                        blank=True,
                        help_text="Documento oficial de nombramiento o asignación",
                        null=True,
                        upload_to="assignments/appointments/%Y/%m/",
                        verbose_name="documento de nombramiento",
                    ),
                ),
                (
                    "appointment_resolution",
                    models.CharField(
                        blank=True,
                        help_text="Número de resolución o acto administrativo de nombramiento",
                        max_length=100,
                        verbose_name="resolución de nombramiento",
                    ),
                ),
                (
                    "performance_goals",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text='Metas de desempeño para la asignación:\n        [\n            {\n                "goal": "Reducir tiempo de atención promedio",\n                "target": "< 15 minutos",\n                "deadline": "2024-06-30",\n                "measurement": "Promedio mensual"\n            }\n        ]',
                    ),
                ),
                (
                    "evaluation_scores",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text='Calificaciones de evaluación:\n        {\n            "last_evaluation_date": "2024-01-15",\n            "overall_score": 4.2,\n            "competency_scores": {\n                "leadership": 4.0,\n                "technical_skills": 4.5,\n                "communication": 4.0\n            }\n        }',
                    ),
                ),
                (
                    "requires_supervision",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si requiere supervisión especial",
                        verbose_name="requiere supervisión",
                    ),
                ),
                (
                    "termination_reason",
                    models.CharField(
                        blank=True,
                        help_text="Motivo de terminación de la asignación",
                        max_length=200,
                        verbose_name="motivo de terminación",
                    ),
                ),
                (
                    "termination_document",
                    models.FileField(
                        blank=True,
                        help_text="Documento oficial de terminación",
                        null=True,
                        upload_to="assignments/terminations/%Y/%m/",
                        verbose_name="documento de terminación",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones adicionales sobre la asignación",
                        verbose_name="observaciones",
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Usuario que aprobó la asignación",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assignments_approved",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="aprobado por",
                    ),
                ),
                (
                    "assigned_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Usuario que realizó la asignación",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assignments_made",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="asignado por",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "supervisor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Asignación que supervisa esta asignación",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="supervised_assignments",
                        to="organization.asignacioncargo",
                        verbose_name="supervisor",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Usuario asignado al cargo",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="position_assignments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="usuario",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="organization.cargo",
                        verbose_name="cargo",
                    ),
                ),
            ],
            options={
                "verbose_name": "Asignación de Cargo",
                "verbose_name_plural": "Asignaciones de Cargo",
                "db_table": "org_position_assignment",
                "ordering": ["-start_date", "position"],
                "indexes": [
                    models.Index(
                        fields=["position", "assignment_status"],
                        name="org_positio_positio_5ac073_idx",
                    ),
                    models.Index(
                        fields=["user", "is_active"],
                        name="org_positio_user_id_67cf1f_idx",
                    ),
                    models.Index(
                        fields=["start_date", "end_date"],
                        name="org_positio_start_d_230c92_idx",
                    ),
                    models.Index(
                        fields=["assignment_type", "assignment_status"],
                        name="org_positio_assignm_c4b8f6_idx",
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="asignacioncargo",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("assignment_status", "ACTIVE"),
                    ("assignment_type", "TITULAR"),
                    ("deleted_at__isnull", True),
                    ("end_date__isnull", True),
                ),
                fields=("position", "assignment_type"),
                name="unique_active_titular_per_position",
            ),
        ),
        migrations.AddIndex(
            model_name="autoridad",
            index=models.Index(
                fields=["position", "decision_type"],
                name="org_authori_positio_d45c00_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="autoridad",
            index=models.Index(
                fields=["decision_type", "is_active"],
                name="org_authori_decisio_acdbf9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="autoridad",
            index=models.Index(
                fields=["is_temporary", "valid_until"],
                name="org_authori_is_temp_bbf6f6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="miembrocomite",
            index=models.Index(
                fields=["committee", "participation_type"],
                name="org_committ_committ_a5671c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="miembrocomite",
            index=models.Index(
                fields=["position", "is_active"], name="org_committ_positio_6bd633_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="miembrocomite",
            index=models.Index(
                fields=["start_date", "end_date"], name="org_committ_start_d_d66f94_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="miembrocomite",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("end_date__isnull", True), ("deleted_at__isnull", True)
                ),
                fields=("committee", "position"),
                name="unique_active_member_per_committee",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="meetingattendance",
            unique_together={("meeting", "member")},
        ),
        migrations.AddIndex(
            model_name="committeemeeting",
            index=models.Index(
                fields=["committee", "meeting_date"],
                name="org_committ_committ_5fb32b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="committeemeeting",
            index=models.Index(
                fields=["meeting_date", "status"], name="org_committ_meeting_ca2640_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="committeemeeting",
            constraint=models.UniqueConstraint(
                fields=("committee", "meeting_number"),
                name="unique_meeting_number_per_committee",
            ),
        ),
        migrations.AddIndex(
            model_name="comite",
            index=models.Index(
                fields=["organizational_chart", "committee_type"],
                name="org_committ_organiz_b77d2e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="comite",
            index=models.Index(
                fields=["committee_type", "is_active"],
                name="org_committ_committ_de227e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="comite",
            index=models.Index(
                fields=["sector_specific", "normative_requirement"],
                name="org_committ_sector__23fd74_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="comite",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted_at__isnull", True)),
                fields=("organizational_chart", "code"),
                name="unique_committee_code_per_chart",
            ),
        ),
        migrations.AddIndex(
            model_name="responsabilidad",
            index=models.Index(
                fields=["position", "responsibility_type"],
                name="org_respons_positio_cfeaec_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="responsabilidad",
            index=models.Index(
                fields=["is_normative_requirement", "is_active"],
                name="org_respons_is_norm_2a1575_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="responsabilidad",
            index=models.Index(
                fields=["priority_level", "frequency"],
                name="org_respons_priorit_ead807_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="sector",
            index=models.Index(
                fields=["code", "is_active"], name="org_sector_code_2a41bd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="plantillaorganigrama",
            index=models.Index(
                fields=["sector", "organization_type"],
                name="org_chart_t_sector__93064d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="plantillaorganigrama",
            index=models.Index(
                fields=["complexity", "is_active"],
                name="org_chart_t_complex_05c734_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="plantillaorganigrama",
            unique_together={("sector", "organization_type", "complexity")},
        ),
        migrations.AddIndex(
            model_name="organizationalchart",
            index=models.Index(
                fields=["organization", "is_current"],
                name="org_chart_organiz_319bec_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="organizationalchart",
            index=models.Index(
                fields=["sector", "effective_date"], name="org_chart_sector__d06a31_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organizationalchart",
            index=models.Index(
                fields=["organization_type", "is_current"],
                name="org_chart_organiz_c9962d_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="organizationalchart",
            constraint=models.UniqueConstraint(
                fields=("organization", "version"), name="unique_org_version"
            ),
        ),
        migrations.AddConstraint(
            model_name="organizationalchart",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("hierarchy_levels__gte", 3), ("hierarchy_levels__lte", 10)
                ),
                name="valid_hierarchy_levels",
            ),
        ),
        migrations.AddConstraint(
            model_name="organizationalchart",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_current", True), ("deleted_at__isnull", True)),
                fields=("organization",),
                name="unique_current_chart_per_org",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="sectornormativa",
            unique_together={("sector", "code")},
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["sector", "is_active"], name="org_service_sector__ad5b32_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["category", "is_mandatory"],
                name="org_service_categor_5da799_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="service",
            index=models.Index(
                fields=["parent_service", "is_active"],
                name="org_service_parent__85dc94_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="service",
            unique_together={("code", "sector")},
        ),
        migrations.AddIndex(
            model_name="cargo",
            index=models.Index(
                fields=["area", "is_active"], name="org_positio_area_id_6041bb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="cargo",
            index=models.Index(
                fields=["reports_to", "hierarchy_level"],
                name="org_positio_reports_beee19_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="cargo",
            index=models.Index(
                fields=["position_type", "is_service_leader"],
                name="org_positio_positio_e000f2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="cargo",
            index=models.Index(
                fields=["is_critical", "is_active"],
                name="org_positio_is_crit_8a1734_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="cargo",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted_at__isnull", True)),
                fields=("area", "code"),
                name="unique_position_code_per_area",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="serviceareaassignment",
            unique_together={("area", "service", "assignment_type")},
        ),
        migrations.AddIndex(
            model_name="area",
            index=models.Index(
                fields=["organizational_chart", "hierarchy_level"],
                name="org_area_organiz_d7ea3d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="area",
            index=models.Index(
                fields=["parent_area", "is_active"], name="org_area_parent__6db84d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="area",
            index=models.Index(
                fields=["area_type", "sede"], name="org_area_area_ty_1060ac_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="area",
            constraint=models.UniqueConstraint(
                condition=models.Q(("deleted_at__isnull", True)),
                fields=("organizational_chart", "code"),
                name="unique_area_code_per_chart",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceintegration",
            index=models.Index(
                fields=["organization", "operational_status"],
                name="org_service_organiz_079d1e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceintegration",
            index=models.Index(
                fields=["service", "responsible_area"],
                name="org_service_service_29e668_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceintegration",
            index=models.Index(
                fields=["responsible_position", "is_active"],
                name="org_service_respons_2f76de_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="serviceintegration",
            unique_together={("organization", "service")},
        ),
    ]
