# Generated by Django 5.0 on 2025-08-21 04:46

import apps.organization.validators
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("organization", "0012_add_sogcs_sedes"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="headquarterlocation",
            name="atencion_24_horas",
            field=models.BooleanField(
                default=False,
                help_text="Indica si la sede presta atención las 24 horas.",
                verbose_name="atención 24 horas",
            ),
        ),
        migrations.AddField(
            model_name="headquarterlocation",
            name="barrio",
            field=models.CharField(
                blank=True,
                default="",
                help_text="Barrio o zona de ubicación de la sede.",
                max_length=100,
                verbose_name="barrio",
            ),
        ),
        migrations.AddField(
            model_name="headquarterlocation",
            name="cargo_responsable_administrativo",
            field=models.CharField(
                default="Administrador",
                help_text="Cargo del responsable administrativo de la sede.",
                max_length=100,
                verbose_name="cargo responsable administrativo",
            ),
        ),
        migrations.AlterField(
            model_name="headquarterlocation",
            name="department_code",
            field=models.CharField(
                help_text="Código DIVIPOLA del departamento.",
                max_length=2,
                validators=[
                    django.core.validators.RegexValidator(
                        message="Código de departamento debe tener 2 dígitos.",
                        regex="^\\d{2}$",
                    ),
                    apps.organization.validators.validate_divipola_department,
                ],
                verbose_name="código departamento",
            ),
        ),
        migrations.CreateModel(
            name="HealthServiceCatalog",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "service_code",
                    models.CharField(
                        help_text="Código REPS del servicio según Res. 3100/2019.",
                        max_length=10,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="El código debe tener 3 o 4 dígitos.",
                                regex="^\\d{3,4}$",
                            )
                        ],
                        verbose_name="código del servicio",
                    ),
                ),
                (
                    "service_name",
                    models.CharField(
                        help_text="Nombre oficial del servicio de salud.",
                        max_length=255,
                        verbose_name="nombre del servicio",
                    ),
                ),
                (
                    "service_group_code",
                    models.CharField(
                        choices=[
                            ("7", "Apoyo Diagnóstico y Complementación Terapéutica"),
                            ("11", "Atención Inmediata"),
                            ("1", "Consulta Externa"),
                            ("2", "Internación"),
                            ("3", "Quirúrgicos"),
                            ("4", "Urgencias"),
                            ("5", "Transporte Asistencial"),
                            ("6", "Otros Servicios"),
                            ("8", "Protección Específica y Detección Temprana"),
                            ("9", "Procesos"),
                            ("10", "Telemedicina"),
                        ],
                        help_text="Código del grupo de servicio.",
                        max_length=2,
                        verbose_name="código grupo",
                    ),
                ),
                (
                    "service_group_name",
                    models.CharField(
                        help_text="Nombre del grupo de servicio.",
                        max_length=100,
                        verbose_name="nombre grupo",
                    ),
                ),
                (
                    "requires_infrastructure",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el servicio requiere infraestructura especial.",
                        verbose_name="requiere infraestructura especial",
                    ),
                ),
                (
                    "requires_equipment",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el servicio requiere equipamiento especial.",
                        verbose_name="requiere equipamiento especial",
                    ),
                ),
                (
                    "requires_human_talent",
                    models.JSONField(
                        default=dict,
                        help_text="Profesionales requeridos según normativa.",
                        verbose_name="talento humano requerido",
                    ),
                ),
                (
                    "allows_ambulatory",
                    models.BooleanField(
                        default=True,
                        help_text="Servicio puede prestarse en modalidad ambulatoria.",
                        verbose_name="permite ambulatorio",
                    ),
                ),
                (
                    "allows_hospital",
                    models.BooleanField(
                        default=False,
                        help_text="Servicio puede prestarse en modalidad hospitalaria.",
                        verbose_name="permite hospitalario",
                    ),
                ),
                (
                    "allows_mobile_unit",
                    models.BooleanField(
                        default=False,
                        help_text="Servicio puede prestarse en unidad móvil.",
                        verbose_name="permite unidad móvil",
                    ),
                ),
                (
                    "allows_domiciliary",
                    models.BooleanField(
                        default=False,
                        help_text="Servicio puede prestarse a domicilio.",
                        verbose_name="permite domiciliario",
                    ),
                ),
                (
                    "allows_telemedicine",
                    models.BooleanField(
                        default=False,
                        help_text="Servicio puede prestarse por telemedicina.",
                        verbose_name="permite telemedicina",
                    ),
                ),
                (
                    "min_complexity",
                    models.IntegerField(
                        choices=[(1, "Baja"), (2, "Media"), (3, "Alta")],
                        default=1,
                        help_text="Nivel mínimo de complejidad requerido.",
                        verbose_name="complejidad mínima",
                    ),
                ),
                (
                    "max_complexity",
                    models.IntegerField(
                        choices=[(1, "Baja"), (2, "Media"), (3, "Alta")],
                        default=3,
                        help_text="Nivel máximo de complejidad permitido.",
                        verbose_name="complejidad máxima",
                    ),
                ),
                (
                    "standard_requirements",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Requisitos según estándares de habilitación.",
                        verbose_name="requisitos estándar",
                    ),
                ),
                (
                    "documentation_required",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de documentos requeridos para habilitación.",
                        verbose_name="documentación requerida",
                    ),
                ),
                (
                    "resolution_reference",
                    models.CharField(
                        default="RES_3100_2019",
                        help_text="Resolución que define el servicio.",
                        max_length=50,
                        verbose_name="referencia normativa",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Notas adicionales sobre el servicio.",
                        verbose_name="notas",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "dependent_services",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Servicios requeridos para habilitar este servicio.",
                        related_name="required_by_services",
                        to="organization.healthservicecatalog",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "catálogo de servicios",
                "verbose_name_plural": "catálogo de servicios",
                "ordering": ["service_group_code", "service_code"],
            },
        ),
        migrations.CreateModel(
            name="SedeHealthService",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "service_code",
                    models.CharField(
                        help_text="Código REPS del servicio.",
                        max_length=10,
                        verbose_name="código del servicio",
                    ),
                ),
                (
                    "service_name",
                    models.CharField(
                        help_text="Nombre del servicio habilitado.",
                        max_length=255,
                        verbose_name="nombre del servicio",
                    ),
                ),
                (
                    "service_group_code",
                    models.CharField(
                        help_text="Código del grupo de servicio.",
                        max_length=2,
                        verbose_name="código grupo",
                    ),
                ),
                (
                    "service_group_name",
                    models.CharField(
                        help_text="Nombre del grupo de servicio.",
                        max_length=100,
                        verbose_name="nombre grupo",
                    ),
                ),
                (
                    "ambulatory",
                    models.CharField(
                        choices=[("SI", "Sí"), ("NO", "No"), ("SD", "Sin Datos")],
                        default="SD",
                        help_text="Servicio ambulatorio.",
                        max_length=2,
                        verbose_name="ambulatorio",
                    ),
                ),
                (
                    "hospital",
                    models.CharField(
                        choices=[("SI", "Sí"), ("NO", "No"), ("SD", "Sin Datos")],
                        default="SD",
                        help_text="Servicio hospitalario.",
                        max_length=2,
                        verbose_name="hospitalario",
                    ),
                ),
                (
                    "mobile_unit",
                    models.CharField(
                        choices=[("SI", "Sí"), ("NO", "No"), ("SD", "Sin Datos")],
                        default="SD",
                        help_text="Servicio en unidad móvil.",
                        max_length=2,
                        verbose_name="unidad móvil",
                    ),
                ),
                (
                    "domiciliary",
                    models.CharField(
                        choices=[("SI", "Sí"), ("NO", "No"), ("SD", "Sin Datos")],
                        default="SD",
                        help_text="Servicio domiciliario.",
                        max_length=2,
                        verbose_name="domiciliario",
                    ),
                ),
                (
                    "other_extramural",
                    models.CharField(
                        choices=[("SI", "Sí"), ("NO", "No"), ("SD", "Sin Datos")],
                        default="SD",
                        help_text="Otras modalidades extramurales.",
                        max_length=2,
                        verbose_name="otras extramural",
                    ),
                ),
                (
                    "is_reference_center",
                    models.CharField(
                        choices=[("SI", "Sí"), ("NO", "No"), ("SD", "Sin Datos")],
                        default="NO",
                        help_text="Es centro de referencia.",
                        max_length=2,
                        verbose_name="centro de referencia",
                    ),
                ),
                (
                    "is_referring_institution",
                    models.CharField(
                        choices=[("SI", "Sí"), ("NO", "No"), ("SD", "Sin Datos")],
                        default="NO",
                        help_text="Es institución remisora.",
                        max_length=2,
                        verbose_name="institución remisora",
                    ),
                ),
                (
                    "low_complexity",
                    models.CharField(
                        choices=[("SI", "Sí"), ("NO", "No"), ("SD", "Sin Datos")],
                        default="SD",
                        max_length=2,
                        verbose_name="complejidad baja",
                    ),
                ),
                (
                    "medium_complexity",
                    models.CharField(
                        choices=[("SI", "Sí"), ("NO", "No"), ("SD", "Sin Datos")],
                        default="SD",
                        max_length=2,
                        verbose_name="complejidad media",
                    ),
                ),
                (
                    "high_complexity",
                    models.CharField(
                        choices=[("SI", "Sí"), ("NO", "No"), ("SD", "Sin Datos")],
                        default="SD",
                        max_length=2,
                        verbose_name="complejidad alta",
                    ),
                ),
                (
                    "complexity_level",
                    models.CharField(
                        choices=[
                            ("BAJA", "Baja"),
                            ("MEDIANA", "Mediana"),
                            ("ALTA", "Alta"),
                            ("SD", "Sin Datos"),
                        ],
                        default="SD",
                        help_text="Nivel de complejidad consolidado.",
                        max_length=10,
                        verbose_name="nivel de complejidad",
                    ),
                ),
                (
                    "opening_date",
                    models.CharField(
                        blank=True,
                        help_text="Fecha de apertura del servicio (YYYYMMDD).",
                        max_length=10,
                        verbose_name="fecha apertura",
                    ),
                ),
                (
                    "closing_date",
                    models.CharField(
                        blank=True,
                        help_text="Fecha de cierre del servicio.",
                        max_length=10,
                        verbose_name="fecha cierre",
                    ),
                ),
                (
                    "distinctive_number",
                    models.CharField(
                        help_text="Número distintivo único del servicio.",
                        max_length=20,
                        unique=True,
                        verbose_name="número distintivo",
                    ),
                ),
                (
                    "main_sede_number",
                    models.CharField(
                        blank=True,
                        help_text="Número de la sede principal.",
                        max_length=5,
                        verbose_name="número sede principal",
                    ),
                ),
                (
                    "schedule",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Horario por día de la semana.",
                        verbose_name="horario de atención",
                    ),
                ),
                (
                    "intramural_modality",
                    models.BooleanField(
                        default=True,
                        help_text="Servicio con modalidad intramural.",
                        verbose_name="modalidad intramural",
                    ),
                ),
                (
                    "telemedicine_modality",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Modalidades de telemedicina habilitadas.",
                        verbose_name="modalidades de telemedicina",
                    ),
                ),
                (
                    "specificities",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Especificidades del servicio (oncológico, trasplantes, etc.).",
                        verbose_name="especificidades",
                    ),
                ),
                (
                    "installed_capacity",
                    models.IntegerField(
                        default=0,
                        help_text="Capacidad instalada del servicio.",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="capacidad instalada",
                    ),
                ),
                (
                    "human_talent",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Personal asignado al servicio.",
                        verbose_name="talento humano",
                    ),
                ),
                (
                    "quality_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Puntaje de calidad del servicio (0-100).",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="puntaje de calidad",
                    ),
                ),
                (
                    "last_audit_date",
                    models.DateField(
                        blank=True,
                        help_text="Fecha de la última auditoría del servicio.",
                        null=True,
                        verbose_name="fecha última auditoría",
                    ),
                ),
                (
                    "compliance_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Porcentaje de cumplimiento normativo (0-100).",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="porcentaje de cumplimiento",
                    ),
                ),
                (
                    "is_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Si el servicio está actualmente habilitado.",
                        verbose_name="habilitado",
                    ),
                ),
                (
                    "observations",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones del servicio.",
                        verbose_name="observaciones",
                    ),
                ),
                (
                    "norm_version",
                    models.CharField(
                        default="RESOLUCION_3100",
                        help_text="Versión de la norma aplicable.",
                        max_length=50,
                        verbose_name="versión de norma",
                    ),
                ),
                (
                    "manager_name",
                    models.CharField(
                        blank=True,
                        help_text="Nombre del gerente o responsable.",
                        max_length=255,
                        verbose_name="nombre del gerente",
                    ),
                ),
                (
                    "reps_import_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Última fecha de importación desde REPS.",
                        null=True,
                        verbose_name="fecha importación REPS",
                    ),
                ),
                (
                    "reps_raw_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Datos originales del archivo REPS.",
                        verbose_name="datos crudos REPS",
                    ),
                ),
                (
                    "is_pdet_municipality",
                    models.BooleanField(
                        default=False,
                        help_text="Municipio con Programas de Desarrollo con Enfoque Territorial.",
                        verbose_name="municipio PDET",
                    ),
                ),
                (
                    "is_zomac_municipality",
                    models.BooleanField(
                        default=False,
                        help_text="Zona más afectada por el conflicto armado.",
                        verbose_name="municipio ZOMAC",
                    ),
                ),
                (
                    "is_pnis_municipality",
                    models.BooleanField(
                        default=False,
                        help_text="Programa Nacional Integral de Sustitución.",
                        verbose_name="municipio PNIS",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "headquarters",
                    models.ForeignKey(
                        help_text="Sede donde se presta el servicio.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="health_services",
                        to="organization.headquarterlocation",
                        verbose_name="sede",
                    ),
                ),
                (
                    "service_catalog",
                    models.ForeignKey(
                        blank=True,
                        help_text="Referencia al catálogo maestro de servicios.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sede_instances",
                        to="organization.healthservicecatalog",
                        verbose_name="servicio del catálogo",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "servicio de salud habilitado",
                "verbose_name_plural": "servicios de salud habilitados",
                "ordering": ["headquarters", "service_group_code", "service_code"],
            },
        ),
        migrations.CreateModel(
            name="ServiceImportLog",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "import_type",
                    models.CharField(
                        choices=[
                            ("manual", "Manual"),
                            ("scheduled", "Programada"),
                            ("api", "API"),
                        ],
                        help_text="Método de importación utilizado.",
                        max_length=20,
                        verbose_name="tipo de importación",
                    ),
                ),
                (
                    "file_name",
                    models.CharField(
                        help_text="Nombre del archivo importado.",
                        max_length=255,
                        verbose_name="nombre del archivo",
                    ),
                ),
                (
                    "file_size",
                    models.IntegerField(
                        help_text="Tamaño en bytes", verbose_name="tamaño del archivo"
                    ),
                ),
                (
                    "file_path",
                    models.CharField(
                        blank=True,
                        help_text="Ruta donde se almacenó el archivo.",
                        max_length=500,
                        verbose_name="ruta del archivo",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pendiente"),
                            ("processing", "Procesando"),
                            ("completed", "Completado"),
                            ("failed", "Fallido"),
                            ("partial", "Parcial"),
                        ],
                        default="pending",
                        help_text="Estado actual de la importación.",
                        max_length=20,
                        verbose_name="estado",
                    ),
                ),
                (
                    "total_rows",
                    models.IntegerField(
                        default=0,
                        help_text="Total de filas en el archivo.",
                        verbose_name="total de filas",
                    ),
                ),
                (
                    "processed_rows",
                    models.IntegerField(
                        default=0,
                        help_text="Número de filas procesadas.",
                        verbose_name="filas procesadas",
                    ),
                ),
                (
                    "successful_rows",
                    models.IntegerField(
                        default=0,
                        help_text="Número de filas importadas exitosamente.",
                        verbose_name="filas exitosas",
                    ),
                ),
                (
                    "failed_rows",
                    models.IntegerField(
                        default=0,
                        help_text="Número de filas que fallaron.",
                        verbose_name="filas fallidas",
                    ),
                ),
                (
                    "services_created",
                    models.IntegerField(
                        default=0,
                        help_text="Número de servicios nuevos creados.",
                        verbose_name="servicios creados",
                    ),
                ),
                (
                    "services_updated",
                    models.IntegerField(
                        default=0,
                        help_text="Número de servicios actualizados.",
                        verbose_name="servicios actualizados",
                    ),
                ),
                (
                    "services_disabled",
                    models.IntegerField(
                        default=0,
                        help_text="Número de servicios deshabilitados.",
                        verbose_name="servicios deshabilitados",
                    ),
                ),
                (
                    "headquarters_created",
                    models.IntegerField(
                        default=0,
                        help_text="Número de sedes creadas durante la importación.",
                        verbose_name="sedes creadas",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha y hora de inicio.",
                        null=True,
                        verbose_name="iniciado en",
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha y hora de finalización.",
                        null=True,
                        verbose_name="completado en",
                    ),
                ),
                (
                    "processing_time",
                    models.FloatField(
                        blank=True,
                        help_text="Tiempo de procesamiento en segundos",
                        null=True,
                        verbose_name="tiempo de procesamiento",
                    ),
                ),
                (
                    "errors",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de errores encontrados",
                        verbose_name="errores",
                    ),
                ),
                (
                    "warnings",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de advertencias",
                        verbose_name="advertencias",
                    ),
                ),
                (
                    "validation_errors",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Errores de validación por fila",
                        verbose_name="errores de validación",
                    ),
                ),
                (
                    "raw_data_sample",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Muestra de datos crudos para debugging",
                        verbose_name="muestra de datos",
                    ),
                ),
                (
                    "processing_details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Detalles adicionales del procesamiento",
                        verbose_name="detalles de procesamiento",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="Organización que realizó la importación.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_import_logs",
                        to="organization.healthorganization",
                        verbose_name="organización",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "log de importación de servicios",
                "verbose_name_plural": "logs de importación de servicios",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="healthservicecatalog",
            index=models.Index(
                fields=["service_code"], name="organizatio_service_996b40_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthservicecatalog",
            index=models.Index(
                fields=["service_group_code"], name="organizatio_service_44f5da_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="healthservicecatalog",
            index=models.Index(
                fields=["is_active"], name="organizatio_is_acti_9c7f02_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sedehealthservice",
            index=models.Index(
                fields=["headquarters", "is_enabled"],
                name="organizatio_headqua_c3eef5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="sedehealthservice",
            index=models.Index(
                fields=["service_code"], name="organizatio_service_d25262_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sedehealthservice",
            index=models.Index(
                fields=["distinctive_number"], name="organizatio_distinc_81cb19_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sedehealthservice",
            index=models.Index(
                fields=["service_group_code"], name="organizatio_service_10561f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sedehealthservice",
            index=models.Index(
                fields=["complexity_level"], name="organizatio_complex_95c2c7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="sedehealthservice",
            index=models.Index(
                fields=["opening_date"], name="organizatio_opening_b973c6_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="sedehealthservice",
            unique_together={("headquarters", "service_code", "distinctive_number")},
        ),
        migrations.AddIndex(
            model_name="serviceimportlog",
            index=models.Index(
                fields=["organization", "-created_at"],
                name="organizatio_organiz_5e6966_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="serviceimportlog",
            index=models.Index(fields=["status"], name="organizatio_status_28c926_idx"),
        ),
        migrations.AddIndex(
            model_name="serviceimportlog",
            index=models.Index(
                fields=["import_type"], name="organizatio_import__5e07b2_idx"
            ),
        ),
    ]
