# Generated by Django 5.0 on 2025-08-24 03:31

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("organization", "0016_organizational_chart_system"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ServicioHabilitado",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "codigo",
                    models.CharField(
                        help_text="Código del servicio según normativa",
                        max_length=10,
                        unique=True,
                    ),
                ),
                ("nombre", models.CharField(max_length=200)),
                (
                    "categoria",
                    models.CharField(
                        choices=[
                            ("consulta_externa", "Consulta Externa"),
                            ("urgencias", "Urgencias"),
                            ("hospitalizacion", "Hospitalización"),
                            ("cirugia", "Cirugía"),
                            ("uci", "Unidad de Cuidados Intensivos"),
                            ("apoyo_diagnostico", "Apoyo Diagnóstico"),
                            ("apoyo_terapeutico", "Apoyo Terapéutico"),
                            ("transporte_asistencial", "Transporte Asistencial"),
                            ("otros", "Otros"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "complejidad_minima",
                    models.CharField(
                        choices=[
                            ("I", "Nivel I - Baja Complejidad"),
                            ("II", "Nivel II - Mediana Complejidad"),
                            ("III", "Nivel III - Alta Complejidad"),
                            ("IV", "Nivel IV - Alta Complejidad"),
                        ],
                        help_text="Complejidad mínima requerida para este servicio",
                        max_length=3,
                    ),
                ),
                ("activo", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Servicio Habilitado",
                "verbose_name_plural": "Servicios Habilitados",
                "db_table": "org_servicios_habilitados",
                "ordering": ["categoria", "nombre"],
            },
        ),
        migrations.CreateModel(
            name="AreaFuncional",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=200)),
                ("codigo", models.CharField(max_length=50, unique=True)),
                ("descripcion", models.TextField()),
                (
                    "categoria",
                    models.CharField(
                        choices=[
                            ("asistencial", "Asistencial"),
                            ("administrativa", "Administrativa"),
                            ("apoyo", "Apoyo"),
                            ("calidad", "Calidad y Seguridad"),
                            ("estrategica", "Estratégica"),
                        ],
                        max_length=50,
                    ),
                ),
                ("obligatoria_nivel_i", models.BooleanField(default=False)),
                ("obligatoria_nivel_ii", models.BooleanField(default=False)),
                ("obligatoria_nivel_iii", models.BooleanField(default=False)),
                ("obligatoria_nivel_iv", models.BooleanField(default=False)),
                ("activo", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "servicios_relacionados",
                    models.ManyToManyField(
                        blank=True, to="organization.serviciohabilitado"
                    ),
                ),
            ],
            options={
                "verbose_name": "Área Funcional",
                "verbose_name_plural": "Áreas Funcionales",
                "db_table": "org_areas_funcionales",
                "ordering": ["categoria", "nombre"],
            },
        ),
        migrations.CreateModel(
            name="TemplateOrganizacional",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("nombre", models.CharField(max_length=200)),
                ("descripcion", models.TextField()),
                (
                    "complejidad_ips",
                    models.CharField(
                        choices=[
                            ("I", "Nivel I - Baja Complejidad"),
                            ("II", "Nivel II - Mediana Complejidad"),
                            ("III", "Nivel III - Alta Complejidad"),
                            ("IV", "Nivel IV - Alta Complejidad"),
                        ],
                        help_text="Nivel de complejidad de IPS para este template",
                        max_length=3,
                    ),
                ),
                (
                    "es_oficial",
                    models.BooleanField(
                        default=False,
                        help_text="Template oficial certificado por ZentraQMS",
                    ),
                ),
                (
                    "es_base",
                    models.BooleanField(
                        default=False,
                        help_text="Template base para creación de otros templates",
                    ),
                ),
                ("version", models.CharField(default="1.0", max_length=20)),
                ("fecha_vigencia_desde", models.DateField()),
                ("fecha_vigencia_hasta", models.DateField(blank=True, null=True)),
                (
                    "estructura_organizacional",
                    models.JSONField(
                        default=dict,
                        help_text="Estructura organizacional completa en formato JSON",
                    ),
                ),
                (
                    "validaciones_sogcs",
                    models.JSONField(
                        default=dict, help_text="Reglas de validación SOGCS específicas"
                    ),
                ),
                (
                    "indicadores_minimos",
                    models.JSONField(
                        default=list,
                        help_text="Lista de indicadores mínimos requeridos",
                    ),
                ),
                ("veces_aplicado", models.PositiveIntegerField(default=0)),
                (
                    "rating_promedio",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                ("fecha_aprobacion", models.DateTimeField(blank=True, null=True)),
                ("activo", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "aprobado_por",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="templates_aprobados",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "creado_por",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="templates_creados",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sector",
                    models.ForeignKey(
                        help_text="Sector al que aplica este template",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organization.sector",
                    ),
                ),
                (
                    "servicios_incluidos",
                    models.ManyToManyField(
                        help_text="Servicios habilitados cubiertos por este template",
                        to="organization.serviciohabilitado",
                    ),
                ),
            ],
            options={
                "verbose_name": "Template Organizacional",
                "verbose_name_plural": "Templates Organizacionales",
                "db_table": "org_templates_organizacionales",
                "ordering": ["-es_oficial", "-es_base", "complejidad_ips", "nombre"],
                "unique_together": {("nombre", "sector", "complejidad_ips", "version")},
            },
        ),
        migrations.CreateModel(
            name="HistorialCambiosTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "accion",
                    models.CharField(
                        choices=[
                            ("creacion", "Creación"),
                            ("modificacion", "Modificación"),
                            ("aprobacion", "Aprobación"),
                            ("desactivacion", "Desactivación"),
                            ("reactivacion", "Reactivación"),
                        ],
                        max_length=50,
                    ),
                ),
                ("campo_modificado", models.CharField(blank=True, max_length=100)),
                ("valor_anterior", models.JSONField(blank=True, null=True)),
                ("valor_nuevo", models.JSONField(blank=True, null=True)),
                ("justificacion", models.TextField(blank=True)),
                ("fecha", models.DateTimeField(auto_now_add=True)),
                (
                    "usuario",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historial_cambios",
                        to="organization.templateorganizacional",
                    ),
                ),
            ],
            options={
                "verbose_name": "Historial de Cambios Template",
                "verbose_name_plural": "Historiales de Cambios Template",
                "db_table": "org_historial_cambios_template",
                "ordering": ["-fecha"],
            },
        ),
        migrations.CreateModel(
            name="AplicacionTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "servicios_seleccionados",
                    models.JSONField(
                        default=list,
                        help_text="Servicios específicos seleccionados para aplicar",
                    ),
                ),
                (
                    "customizaciones",
                    models.JSONField(
                        default=dict,
                        help_text="Customizaciones realizadas al template base",
                    ),
                ),
                (
                    "estado",
                    models.CharField(
                        choices=[
                            ("iniciada", "Iniciada"),
                            ("en_proceso", "En Proceso"),
                            ("completada", "Completada"),
                            ("fallida", "Fallida"),
                            ("revertida", "Revertida"),
                        ],
                        default="iniciada",
                        max_length=20,
                    ),
                ),
                (
                    "estructura_generada",
                    models.JSONField(
                        default=dict,
                        help_text="Estructura organizacional final generada",
                    ),
                ),
                (
                    "porcentaje_cumplimiento",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        help_text="% de cumplimiento SOGCS logrado",
                        max_digits=5,
                    ),
                ),
                (
                    "gaps_identificados",
                    models.JSONField(
                        default=list, help_text="Gaps de cumplimiento identificados"
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("comentarios", models.TextField(blank=True)),
                ("fecha_aplicacion", models.DateTimeField(auto_now_add=True)),
                ("fecha_completado", models.DateTimeField(blank=True, null=True)),
                (
                    "aplicado_por",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "organizacion",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="templates_aplicados",
                        to="organization.organization",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="aplicaciones",
                        to="organization.templateorganizacional",
                    ),
                ),
            ],
            options={
                "verbose_name": "Aplicación de Template",
                "verbose_name_plural": "Aplicaciones de Template",
                "db_table": "org_aplicaciones_template",
                "ordering": ["-fecha_aplicacion"],
            },
        ),
        migrations.CreateModel(
            name="TipoCargo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=200)),
                ("codigo", models.CharField(max_length=50, unique=True)),
                ("descripcion", models.TextField()),
                (
                    "perfil_requerido",
                    models.TextField(
                        help_text="Perfil profesional requerido según normativa"
                    ),
                ),
                ("es_directivo", models.BooleanField(default=False)),
                ("es_coordinacion", models.BooleanField(default=False)),
                ("es_jefatura", models.BooleanField(default=False)),
                ("obligatorio_nivel_i", models.BooleanField(default=False)),
                ("obligatorio_nivel_ii", models.BooleanField(default=False)),
                ("obligatorio_nivel_iii", models.BooleanField(default=False)),
                ("obligatorio_nivel_iv", models.BooleanField(default=False)),
                (
                    "ratio_personal",
                    models.CharField(
                        blank=True,
                        help_text="Ej: '1 por cada 10 camas', '1 por turno', etc.",
                        max_length=200,
                    ),
                ),
                ("activo", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "sector",
                    models.ForeignKey(
                        help_text="Sector al que pertenece este cargo",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organization.sector",
                    ),
                ),
                (
                    "servicios_requeridos",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Servicios que requieren este cargo específicamente",
                        to="organization.serviciohabilitado",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tipo de Cargo",
                "verbose_name_plural": "Tipos de Cargo",
                "db_table": "org_tipos_cargo",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="AreaFuncionalCargo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("es_obligatorio", models.BooleanField(default=True)),
                ("cantidad_minima", models.PositiveIntegerField(default=1)),
                ("cantidad_maxima", models.PositiveIntegerField(blank=True, null=True)),
                ("requiere_24_7", models.BooleanField(default=False)),
                (
                    "turnos_requeridos",
                    models.CharField(
                        blank=True,
                        help_text="Ej: 'Diurno', 'Nocturno', '24/7', etc.",
                        max_length=100,
                    ),
                ),
                (
                    "area_funcional",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organization.areafuncional",
                    ),
                ),
                (
                    "tipo_cargo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organization.tipocargo",
                    ),
                ),
            ],
            options={
                "db_table": "org_area_funcional_cargos",
                "unique_together": {("area_funcional", "tipo_cargo")},
            },
        ),
        migrations.AddField(
            model_name="areafuncional",
            name="cargos_requeridos",
            field=models.ManyToManyField(
                help_text="Cargos que debe tener esta área funcional",
                through="organization.AreaFuncionalCargo",
                to="organization.tipocargo",
            ),
        ),
        migrations.CreateModel(
            name="TipoComite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nombre", models.CharField(max_length=200)),
                ("codigo", models.CharField(max_length=50, unique=True)),
                ("descripcion", models.TextField()),
                (
                    "base_normativa",
                    models.CharField(
                        help_text="Resolución o norma que lo requiere", max_length=200
                    ),
                ),
                (
                    "periodicidad",
                    models.CharField(
                        choices=[
                            ("semanal", "Semanal"),
                            ("quincenal", "Quincenal"),
                            ("mensual", "Mensual"),
                            ("bimestral", "Bimestral"),
                            ("trimestral", "Trimestral"),
                            ("semestral", "Semestral"),
                            ("anual", "Anual"),
                        ],
                        max_length=50,
                    ),
                ),
                ("obligatorio_nivel_i", models.BooleanField(default=False)),
                ("obligatorio_nivel_ii", models.BooleanField(default=False)),
                ("obligatorio_nivel_iii", models.BooleanField(default=False)),
                ("obligatorio_nivel_iv", models.BooleanField(default=False)),
                ("activo", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "servicios_requeridos",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Servicios que requieren este comité específicamente",
                        to="organization.serviciohabilitado",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tipo de Comité",
                "verbose_name_plural": "Tipos de Comité",
                "db_table": "org_tipos_comite",
                "ordering": ["nombre"],
            },
        ),
        migrations.CreateModel(
            name="ValidacionSOGCS",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("codigo", models.CharField(max_length=50, unique=True)),
                ("nombre", models.CharField(max_length=200)),
                ("descripcion", models.TextField()),
                (
                    "categoria",
                    models.CharField(
                        choices=[
                            ("estructura", "Estructura Organizacional"),
                            ("cargos", "Cargos y Personal"),
                            ("comites", "Comités"),
                            ("documentos", "Documentación"),
                            ("indicadores", "Indicadores"),
                            ("procesos", "Procesos"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "regla_validacion",
                    models.JSONField(help_text="Regla de validación en formato JSON"),
                ),
                (
                    "complejidad_aplicable",
                    models.JSONField(
                        default=list,
                        help_text="Niveles de complejidad donde aplica ['I', 'II', 'III', 'IV']",
                    ),
                ),
                (
                    "severidad",
                    models.CharField(
                        choices=[
                            ("critica", "Crítica - Impide habilitación"),
                            ("alta", "Alta - Requiere corrección inmediata"),
                            ("media", "Media - Requiere plan de mejora"),
                            ("baja", "Baja - Recomendación"),
                        ],
                        max_length=20,
                    ),
                ),
                ("base_normativa", models.CharField(max_length=200)),
                ("articulo_norma", models.CharField(blank=True, max_length=100)),
                ("activo", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "servicios_aplicables",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Servicios específicos donde aplica",
                        to="organization.serviciohabilitado",
                    ),
                ),
            ],
            options={
                "verbose_name": "Validación SOGCS",
                "verbose_name_plural": "Validaciones SOGCS",
                "db_table": "org_validaciones_sogcs",
                "ordering": ["categoria", "severidad", "nombre"],
            },
        ),
    ]
