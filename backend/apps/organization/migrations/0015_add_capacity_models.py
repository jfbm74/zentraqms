# Generated by Django 5.0 on 2025-08-23 20:22

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("organization", "0014_add_message_to_service_import_log"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CapacidadInstalada",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "grupo_capacidad",
                    models.CharField(
                        choices=[
                            ("CAMAS", "Camas"),
                            ("CAMILLAS", "Camillas"),
                            ("CONSULTORIOS", "Consultorios"),
                            ("SALAS", "Salas"),
                            ("AMBULANCIAS", "Ambulancias"),
                            ("SILLAS", "Sillas"),
                            ("MESAS", "Mesas"),
                            ("EQUIPOS", "Equipos Biomédicos"),
                            ("OTROS", "Otros"),
                        ],
                        help_text="Grupo de capacidad según clasificación REPS",
                        max_length=20,
                        verbose_name="Grupo de Capacidad",
                    ),
                ),
                (
                    "codigo_concepto",
                    models.CharField(
                        help_text="Código del concepto según catálogo REPS (ej: 1, 2, 29, 31)",
                        max_length=10,
                        verbose_name="Código Concepto REPS",
                    ),
                ),
                (
                    "nombre_concepto",
                    models.CharField(
                        help_text="Descripción del concepto (ej: Pediátrica, Adultos, Urgencias)",
                        max_length=200,
                        verbose_name="Nombre del Concepto",
                    ),
                ),
                (
                    "cantidad",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cantidad total de elementos de esta capacidad",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999),
                        ],
                        verbose_name="Cantidad Total",
                    ),
                ),
                (
                    "cantidad_habilitada",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cantidad habilitada según REPS",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999),
                        ],
                        verbose_name="Cantidad Habilitada",
                    ),
                ),
                (
                    "cantidad_funcionando",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cantidad actualmente en funcionamiento",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999),
                        ],
                        verbose_name="Cantidad Funcionando",
                    ),
                ),
                (
                    "estado_capacidad",
                    models.CharField(
                        choices=[
                            ("activa", "Activa"),
                            ("inactiva", "Inactiva"),
                            ("mantenimiento", "En Mantenimiento"),
                            ("reparacion", "En Reparación"),
                            ("fuera_servicio", "Fuera de Servicio"),
                        ],
                        default="activa",
                        help_text="Estado actual de la capacidad",
                        max_length=20,
                        verbose_name="Estado",
                    ),
                ),
                (
                    "numero_placa",
                    models.CharField(
                        blank=True,
                        help_text="Placa del vehículo (solo para ambulancias)",
                        max_length=20,
                        verbose_name="Número de Placa",
                    ),
                ),
                (
                    "modalidad_ambulancia",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("TAB", "Transporte Asistencial Básico"),
                            ("TAM", "Transporte Asistencial Medicalizado"),
                            ("TAAV", "Transporte Asistencial de Alta Velocidad"),
                            ("UAT", "Unidad de Atención de Trauma"),
                        ],
                        help_text="Tipo de ambulancia (TAB, TAM, etc.)",
                        max_length=20,
                        verbose_name="Modalidad de Ambulancia",
                    ),
                ),
                (
                    "modelo_vehiculo",
                    models.CharField(
                        blank=True,
                        help_text="Año modelo del vehículo",
                        max_length=4,
                        verbose_name="Modelo del Vehículo",
                    ),
                ),
                (
                    "numero_tarjeta_propiedad",
                    models.CharField(
                        blank=True,
                        help_text="Número de tarjeta de propiedad del vehículo",
                        max_length=50,
                        verbose_name="Número Tarjeta de Propiedad",
                    ),
                ),
                (
                    "marca",
                    models.CharField(
                        blank=True,
                        help_text="Marca del equipo o elemento",
                        max_length=100,
                        verbose_name="Marca",
                    ),
                ),
                (
                    "modelo_equipo",
                    models.CharField(
                        blank=True,
                        help_text="Modelo específico del equipo",
                        max_length=100,
                        verbose_name="Modelo del Equipo",
                    ),
                ),
                (
                    "numero_serie",
                    models.CharField(
                        blank=True,
                        help_text="Número de serie del equipo",
                        max_length=100,
                        verbose_name="Número de Serie",
                    ),
                ),
                (
                    "porcentaje_ocupacion",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Porcentaje promedio de ocupación (%)",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0")),
                            django.core.validators.MaxValueValidator(Decimal("100")),
                        ],
                        verbose_name="Porcentaje de Ocupación",
                    ),
                ),
                (
                    "horas_funcionamiento_dia",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Horas de funcionamiento promedio por día",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(24),
                        ],
                        verbose_name="Horas de Funcionamiento/Día",
                    ),
                ),
                (
                    "dias_funcionamiento_semana",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Días de funcionamiento por semana",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(7),
                        ],
                        verbose_name="Días de Funcionamiento/Semana",
                    ),
                ),
                (
                    "fecha_corte_reps",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha de corte de los datos REPS",
                        null=True,
                        verbose_name="Fecha de Corte REPS",
                    ),
                ),
                (
                    "sincronizado_reps",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si está sincronizado con portal REPS",
                        verbose_name="Sincronizado con REPS",
                    ),
                ),
                (
                    "fecha_ultimo_reporte",
                    models.DateTimeField(
                        blank=True,
                        help_text="Fecha del último reporte enviado a SuperSalud",
                        null=True,
                        verbose_name="Fecha Último Reporte",
                    ),
                ),
                (
                    "observaciones",
                    models.TextField(
                        blank=True,
                        help_text="Observaciones adicionales sobre esta capacidad",
                        verbose_name="Observaciones",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "health_service",
                    models.ForeignKey(
                        blank=True,
                        help_text="Servicio de salud asociado a esta capacidad (opcional)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="capacidades_asociadas",
                        to="organization.sedehealthservice",
                        verbose_name="Servicio Asociado",
                    ),
                ),
                (
                    "sede_prestadora",
                    models.ForeignKey(
                        help_text="Sede donde está instalada esta capacidad",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="capacidades_instaladas",
                        to="organization.headquarterlocation",
                        verbose_name="Sede Prestadora",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Capacidad Instalada",
                "verbose_name_plural": "Capacidades Instaladas",
                "db_table": "sogcs_capacidad_instalada",
                "ordering": ["grupo_capacidad", "codigo_concepto", "nombre_concepto"],
            },
        ),
        migrations.CreateModel(
            name="CapacidadHistorial",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "accion",
                    models.CharField(
                        choices=[
                            ("creacion", "Creación"),
                            ("modificacion", "Modificación"),
                            ("eliminacion", "Eliminación"),
                            ("importacion", "Importación REPS"),
                            ("sincronizacion", "Sincronización"),
                        ],
                        max_length=20,
                        verbose_name="Acción",
                    ),
                ),
                (
                    "campo_modificado",
                    models.CharField(
                        blank=True,
                        help_text="Campo que fue modificado (solo para modificaciones)",
                        max_length=50,
                        verbose_name="Campo Modificado",
                    ),
                ),
                (
                    "valor_anterior",
                    models.TextField(
                        blank=True,
                        help_text="Valor antes de la modificación",
                        verbose_name="Valor Anterior",
                    ),
                ),
                (
                    "valor_nuevo",
                    models.TextField(
                        blank=True,
                        help_text="Valor después de la modificación",
                        verbose_name="Valor Nuevo",
                    ),
                ),
                (
                    "justificacion",
                    models.TextField(
                        blank=True,
                        help_text="Justificación del cambio",
                        verbose_name="Justificación",
                    ),
                ),
                (
                    "origen_cambio",
                    models.CharField(
                        choices=[
                            ("manual", "Manual"),
                            ("importacion", "Importación"),
                            ("sincronizacion", "Sincronización"),
                            ("automatico", "Automático"),
                        ],
                        default="manual",
                        max_length=20,
                        verbose_name="Origen del Cambio",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
                (
                    "capacidad",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historial",
                        to="organization.capacidadinstalada",
                        verbose_name="Capacidad",
                    ),
                ),
            ],
            options={
                "verbose_name": "Historial de Capacidad",
                "verbose_name_plural": "Historiales de Capacidad",
                "db_table": "sogcs_capacidad_historial",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CapacidadImportLog",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created.",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the record.",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was soft deleted.",
                        null=True,
                        verbose_name="deleted at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this record should be treated as active.",
                        verbose_name="active",
                    ),
                ),
                (
                    "nombre_archivo",
                    models.CharField(
                        help_text="Nombre del archivo importado",
                        max_length=255,
                        verbose_name="Nombre del Archivo",
                    ),
                ),
                (
                    "tamaño_archivo",
                    models.PositiveBigIntegerField(
                        help_text="Tamaño del archivo en bytes",
                        verbose_name="Tamaño del Archivo",
                    ),
                ),
                (
                    "formato_archivo",
                    models.CharField(
                        choices=[
                            ("xls", "Excel (.xls)"),
                            ("xlsx", "Excel (.xlsx)"),
                            ("csv", "CSV"),
                            ("html", "HTML"),
                        ],
                        max_length=10,
                        verbose_name="Formato del Archivo",
                    ),
                ),
                (
                    "total_registros",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total de registros en el archivo",
                        verbose_name="Total de Registros",
                    ),
                ),
                (
                    "registros_importados",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cantidad de registros importados exitosamente",
                        verbose_name="Registros Importados",
                    ),
                ),
                (
                    "registros_actualizados",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cantidad de registros actualizados",
                        verbose_name="Registros Actualizados",
                    ),
                ),
                (
                    "registros_con_error",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Cantidad de registros que fallaron al importar",
                        verbose_name="Registros con Error",
                    ),
                ),
                (
                    "estado_importacion",
                    models.CharField(
                        choices=[
                            ("iniciada", "Iniciada"),
                            ("procesando", "Procesando"),
                            ("completada", "Completada"),
                            ("completada_con_errores", "Completada con Errores"),
                            ("fallida", "Fallida"),
                        ],
                        default="iniciada",
                        max_length=25,
                        verbose_name="Estado de Importación",
                    ),
                ),
                (
                    "errores",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de errores encontrados durante la importación",
                        verbose_name="Errores",
                    ),
                ),
                (
                    "advertencias",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Lista de advertencias durante la importación",
                        verbose_name="Advertencias",
                    ),
                ),
                (
                    "estadisticas",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Estadísticas detalladas de la importación",
                        verbose_name="Estadísticas",
                    ),
                ),
                (
                    "fecha_inicio",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Fecha de Inicio"
                    ),
                ),
                (
                    "fecha_finalizacion",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Fecha de Finalización"
                    ),
                ),
                (
                    "duracion_segundos",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Duración (segundos)"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "deleted_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who soft deleted this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_deleted",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="deleted by",
                    ),
                ),
                (
                    "sede_prestadora",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="import_logs_capacidad",
                        to="organization.headquarterlocation",
                        verbose_name="Sede Prestadora",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Log de Importación de Capacidad",
                "verbose_name_plural": "Logs de Importación de Capacidad",
                "db_table": "sogcs_capacidad_import_log",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["sede_prestadora", "-created_at"],
                        name="idx_import_log_sede_fecha",
                    ),
                    models.Index(
                        fields=["estado_importacion"], name="idx_import_log_estado"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="capacidadinstalada",
            index=models.Index(fields=["grupo_capacidad"], name="idx_capacidad_grupo"),
        ),
        migrations.AddIndex(
            model_name="capacidadinstalada",
            index=models.Index(
                fields=["sede_prestadora", "grupo_capacidad"],
                name="idx_capacidad_sede_grupo",
            ),
        ),
        migrations.AddIndex(
            model_name="capacidadinstalada",
            index=models.Index(
                fields=["codigo_concepto"], name="idx_capacidad_concepto"
            ),
        ),
        migrations.AddIndex(
            model_name="capacidadinstalada",
            index=models.Index(
                fields=["estado_capacidad"], name="idx_capacidad_estado"
            ),
        ),
        migrations.AddIndex(
            model_name="capacidadinstalada",
            index=models.Index(fields=["sincronizado_reps"], name="idx_capacidad_sync"),
        ),
        migrations.AlterUniqueTogether(
            name="capacidadinstalada",
            unique_together={("sede_prestadora", "codigo_concepto", "numero_placa")},
        ),
        migrations.AddIndex(
            model_name="capacidadhistorial",
            index=models.Index(
                fields=["capacidad", "-created_at"],
                name="idx_historial_capacidad_fecha",
            ),
        ),
        migrations.AddIndex(
            model_name="capacidadhistorial",
            index=models.Index(fields=["accion"], name="idx_historial_accion"),
        ),
    ]
