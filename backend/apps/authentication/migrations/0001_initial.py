# Generated by Django 5.0 on 2025-08-12 19:59

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for the user",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Required. Used for login and communication.",
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="Optional. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        null=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this user has verified their email address.",
                        verbose_name="verified",
                    ),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of the last login attempt.",
                        null=True,
                        verbose_name="last login IP",
                    ),
                ),
                (
                    "failed_login_attempts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of consecutive failed login attempts.",
                        verbose_name="failed login attempts",
                    ),
                ),
                (
                    "locked_until",
                    models.DateTimeField(
                        blank=True,
                        help_text="Account is locked until this date and time.",
                        null=True,
                        verbose_name="locked until",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the user was last updated.",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Phone number in Colombian format.",
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message='Número de teléfono debe estar en formato: "+573001234567" o "3001234567".',
                                regex="^\\+?57?[0-9]{10}$",
                            )
                        ],
                        verbose_name="phone number",
                    ),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        help_text="Department or area within the organization.",
                        max_length=100,
                        verbose_name="department",
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        blank=True,
                        help_text="Job title or position within the organization.",
                        max_length=100,
                        verbose_name="position",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this account.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "auth_user",
                "ordering": ["email"],
                "indexes": [
                    models.Index(fields=["email"], name="auth_user_email_ece7f7_idx"),
                    models.Index(
                        fields=["is_active", "is_verified"],
                        name="auth_user_is_acti_29b1d2_idx",
                    ),
                    models.Index(
                        fields=["department"], name="auth_user_departm_266905_idx"
                    ),
                    models.Index(
                        fields=["created_by"], name="auth_user_created_5caa5a_idx"
                    ),
                ],
            },
        ),
    ]
